{
    links: {
        bi_entity_cond: {
            type: object
            props: {
                inverted: {
                    desc: Whether or not this condition is inverted (This condition passes only when the conditions are NOT met).
                    type: boolean
                }
                type: {
                    enum: [
                        origins:and
                        origins:or
                        origins:constant
                        origins:invert
                        origins:actor_condition
                        origins:attack_target
                        origins:attacker
                        origins:both
                        origins:can_see
                        origins:distance
                        origins:either
                        origins:owner
                        origins:relative_rotation
                        origins:riding_recursive
                        origins:riding_root
                        origins:riding
                        origins:target_condition
                        origins:undirected
                    ]
                    more: {
                        "string-origins:and": {
                            conditions: {
                                desc: All of these conditions have to be fulfilled in order for this condition to be fulfilled.
                                type: list
                                vals: {link: "bi_entity_cond"}
                            }
                        }
                        "string-origins:or": {
                            conditions: {
                                desc: At least one of these conditions have to be fulfilled in order for this condition to be fulfilled.
                                type: list
                                vals: {link: "bi_entity_cond"}
                            }
                        }
                        "string-origins:constant": {
                            value: {
                                desc: If true, the condition is always fulfilled. If false, the condition is never fulfilled.
                                type: boolean
                                default: false
                            }
                        }
                        "string-origins:invert": {
                            bientity_condition: {
                                desc: The bi-entity condition to check which will have its 'target' and 'actor' contexts swapped.
                                link: bi_entity_cond
                            }
                        }
                        "string-origins:actor_condition": {
                            condition: {
                                desc: The condition to check for on the acting entity.
                                link: entity_cond
                            }
                        }
                        "string-origins:attack_target": {}
                        "string-origins:attacker": {}
                        "string-origins:both": {
                            condition: {
                                desc: The condition to check on both the actor and target entity.
                                link: entity_cond
                            }
                        }
                        "string-origins:can_see": {}
                        "string-origins:distance": {
                            comparison: {
                                desc: How to compare the distance against the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The distance (in blocks) to compare the distance between the actor and target to.
                                type: number
                            }
                        }
                        "string-origins:either": {
                            condition: {
                                desc: The condition to check on the actor and target entity. It must pass for at least one of them.
                                link: entity_cond
                            }
                        }
                        "string-origins:owner": {}
                        "string-origins:relative_rotation": {
                            axes: {
                                desc: The axes to get the angle values to calculate, and compare to.
                                type: list
                                vals: {enum: ["x", "y", "z"]}
                            }
                            actor_rotation: {
                                desc: Determines the initial point of the rotation for the actor. Accepts "head" or "body".
                                enum: ["head", "body"]
                                default: 0
                            }
                            target_rotation: {
                                desc: Determines the initial position of the rotation for the target. Accepts "head" or "body".
                                enum: ["head", "body"]
                                default: 1
                            }
                            comparison: {
                                desc: Determines how the calculated angle value will be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare the calculated angle value to.
                                type: number
                            }
                        }
                        "string-origins:riding_recursive": {}
                        "string-origins:riding_root": {}
                        "string-origins:riding": {}
                        "string-origins:target_condition": {
                            condition: {
                                desc: The condition to check for on the target entity.
                                link: entity_cond
                            }
                        }
                        "string-origins:undirected": {
                            condition: {
                                desc: The bi-entity condition to check for truth before or after swapping the actor and target context.
                                link: bi_entity_cond
                            }
                        }
                    }
                }
            }
        }
        entity_cond: {
            type: object
            props: {
                inverted: {
                    desc: Whether or not this condition is inverted (This condition passes only when the conditions are NOT met).
                    type: boolean
                }
                type: {
                    enum: [
                        origins:and
                        origins:or
                        origins:constant
                        origins:ability
                        origins:advancement
                        origins:air
                        origins:attribute
                        origins:biome
                        origins:block_collision
                        origins:block_in_radius
                        origins:brightness
                        origins:climbing
                        origins:collided_horizontally
                        origins:command
                        origins:creative_flying
                        origins:daytime
                        origins:dimension
                        origins:distance_from_coordinates
                        origins:elytra_flight_possible
                        origins:enchantment
                        origins:entity_group
                        origins:entity_type
                        origins:equipped_item
                        origins:exists
                        origins:exposed_to_sky
                        origins:exposed_to_sun
                        origins:fall_distance
                        origins:fall_flying
                        origins:fluid_height
                        origins:food_level
                        origins:gamemode
                        origins:health
                        origins:in_block_anywhere
                        origins:in_block
                        origins:in_rain
                        origins:in_tag
                        origins:invisible
                        origins:living
                        origins:moving
                        origins:nbt
                        origins:on_block
                        origins:on_fire
                        origins:origin
                        origins:passenger_recursive
                        origins:passenger
                        origins:power_active
                        origins:power_type
                        origins:power
                        origins:predicate
                        origins:raycast
                        origins:relative_health
                        origins:resource
                        origins:riding_recursive
                        origins:riding_root
                        origins:riding
                        origins:saturation_level
                        origins:scoreboard
                        origins:sneaking
                        origins:sprinting
                        origins:status_effect
                        origins:submerged_in
                        origins:swimming
                        origins:tamed
                        origins:using_effective_tool
                        origins:using_item
                        origins:xp_levels
                        origins:xp_points
                    ]
                    more: {
                        "string-origins:and": {
                            conditions: {
                                desc: All of these conditions have to be fulfilled in order for this condition to be fulfilled.
                                type: list
                                vals: {link: "entity_cond"}
                            }
                        }
                        "string-origins:or": {
                            conditions: {
                                desc: At least one of these conditions have to be fulfilled in order for this condition to be fulfilled.
                                type: list
                                vals: {link: "entity_cond"}
                            }
                        }
                        "string-origins:constant": {
                            value: {
                                desc: If true, the condition is always fulfilled. If false, the condition is never fulfilled.
                                type: boolean
                                default: false
                            }
                        }
                        "string-origins:ability": {
                            ability: {
                                desc: The namespace and ID of the ability to check that the entity has.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                        }
                        "string-origins:advancement": {
                            advancement: {
                                desc: ID of the advancement the player needs to have completed in order for this condition to evaluate to true.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                        }
                        "string-origins:air": {
                            comparison: {
                                desc: How the breath / air / bubble bar (in ticks) should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                            }
                        }
                        "string-origins:attribute": {
                            attribute: {
                                desc: ID of the attribute of which the value should be checked.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            comparison: {
                                desc: How the attribute's value should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: number
                            }
                        }
                        "string-origins:biome": {
                            biome: {
                                desc: If set, this is the ID of the biome the player needs to be in for this condition to evaluate to true, e.g. minecraft:savanna.
                                href: https://minecraft.fandom.com/wiki/Biome#Biome_IDs
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            biomes: {
                                desc: If set, these are the allowed biome IDs the player can be in for this condition to evaluate to true.
                                href: https://minecraft.fandom.com/wiki/Biome#Biome_IDs
                                type: list
                                vals: {
                                    type: string
                                    allow: *a-z0-9_#\/:.-
                                }
                            }
                            condition: {
                                desc: If set, this condition needs to be fulfilled (in addition to having the right ID, if provided) by the biome in order for the condition to evaluate to true.
                                link: biome_cond
                            }
                        }
                        "string-origins:block_collision": {
                            offset_x: {
                                desc: By how much of the bounding box size should the box be offset in the X direction (e.g.: 0 = no offset, 1 = offset of exact width, 2 = offset of twice the width of the bounding box)
                                type: number
                                default: 0
                            }
                            offset_y: {
                                desc: By how much of the bounding box size should the box be offset in the Y direction (e.g.: 0 = no offset, 1 = offset of exact width, 2 = offset of twice the width of the bounding box)
                                type: number
                                default: 0
                            }
                            offset_z: {
                                desc: By how much of the bounding box size should the box be offset in the Z direction (e.g.: 0 = no offset, 1 = offset of exact width, 2 = offset of twice the width of the bounding box)
                                type: number
                                default: 0
                            }
                        }
                        "string-origins:block_in_radius": {
                            block_condition: {
                                desc: The block condition which is applied to the block at the player's feet.
                                link: block_cond
                            }
                            radius: {
                                desc: The radius to check blocks in.
                                type: integer
                            }
                            shape: {
                                desc: Determines the shape of the radius. Accepts "cube", "star" or "sphere".
                                enum: ["cube", "star", "sphere"]
                            }
                            comparison: {
                                desc: How the number of blocks in the radius which fulfill block_condition should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                                default: 1
                            }
                        }
                        "string-origins:brightness": {
                            comparison: {
                                desc: How to compare the brightness at the player's eyes against the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: number
                            }
                        }
                        "string-origins:climbing": {}
                        "string-origins:collided_horizontally": {}
                        "string-origins:command": {
                            command: {
                                desc: Command to run.
                                type: string
                                ext: true
                            }
                            comparison: {
                                desc: How to compare the command's result (all commands return 0 on failure and 1 or more on success. Some commands even return back the count of something.) to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                                default: 1
                            }
                        }
                        "string-origins:creative_flying": {}
                        "string-origins:daytime": {}
                        "string-origins:dimension": {
                            dimension: {
                                desc: ID of the dimension the player needs to be in for this condition to evaluate to true. Vanilla dimensions are minecraft:overworld, minecraft:the_nether and minecraft:the_end, but IDs of custom/modded dimensions should also work.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                        }
                        "string-origins:distance_from_coordinates": {
                            reference: {
                                desc: The point to compare the distance to.
                                enum: ["world_origin", "world_spawn"]
                            }
                            offset: {
                                desc: If specified, determines how much the reference point should be offset.
                                link: vector
                            }
                            ignore_x: {
                                desc: Determines whether to consider the X axis to be 0.
                                type: boolean
                            }
                            ignore_y: {
                                desc: Determines whether to consider the Y axis to be 0.
                                type: boolean
                            }
                            ignore_z: {
                                desc: Determines whether to consider the Z axis to be 0.
                                type: boolean
                            }
                            shape: {
                                desc: Determines the shape of the check.
                                enum: ["cube", "star", "sphere"]
                            }
                            scale_reference_to_dimension: {
                                desc: Determines whether to check for the reference point whilst considering the coordinate scale of the dimension.
                                type: boolean
                                default: true
                            }
                            result_on_the_wrong_dimension: {
                                desc: If specified, this value will override the result of the comparison if the block being tested is not in the reference's dimension.
                                type: boolean
                            }
                            round_to_digit: {
                                desc: If specified, rounds the result to the closest number with the specified amount of digits after the comma. Negative numbers also work.
                                type: integer
                            }
                            comparison: {
                                desc: Determines how the calculated distance is compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare the calculated distance to.
                                type: number
                            }
                        }
                        "string-origins:elytra_flight_possible": {
                            check_state: {
                                desc: Determines if the condition should check if the entity is currently flying with an elytra.
                                type: boolean
                            }
                            check_abilities: {
                                desc: Determines if the condition should check if the entity can fly with an elytra.
                                type: boolean
                                default: true
                            }
                        }
                        "string-origins:enchantment": {
                            enchantment: {
                                desc: ID of the enchantment of interest.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            calculation: {
                                desc: Which number to compare - either the sum of levels of this enchantment on all of the player's equipment, or the max level of this enchantment on any of the player's equipment.
                                enum: ["sum", "max"]
                            }
                            comparison: {
                                desc: How the enchantment level should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                            }
                        }
                        "string-origins:entity_group": {
                            group: {
                                desc: Entity group required for the entity to pass the check. One of default, undead, arthropod, illager, or aquatic. Click for more information about the entity groups.
                                href: https://minecraft.fandom.com/wiki/Mob#Classification
                                enum: ["default", "undead", "arthropod", "illager", "aquatic"]
                            }
                        }
                        "string-origins:entity_type": {
                            entity_type: {
                                desc: ID of the entity type the entity needs to have to pass the check.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                        }
                        "string-origins:equipped_item": {
                            equipment_slot: {
                                desc: Which equipped item to check.
                                enum: ["mainhand", "offhand", "head", "chest", "legs", "feet"]
                            }
                            item_condition: {
                                desc: Which condition will be applied to the item in the specified slot.
                                link: item_cond
                            }
                        }
                        "string-origins:exists": {}
                        "string-origins:exposed_to_sky": {}
                        "string-origins:exposed_to_sun": {}
                        "string-origins:fall_distance": {
                            comparison: {
                                desc: How the player's current fall distance should be compared to the specified value. Note that the value is 0 if the player has slow falling.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: number
                            }
                        }
                        "string-origins:fall_flying": {}
                        "string-origins:fluid_height": {
                            fluid: {
                                desc: ID of the fluid tag of which the height should be checked. Most important examples: minecraft:water and minecraft:lava.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            comparison: {
                                desc: How the fluid height should be compared to the specified value. A fluid height of 0 means the player is not touching the fluid.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: number
                            }
                        }
                        "string-origins:food_level": {
                            comparison: {
                                desc: How the player's current food level should be compared to the specified value. In a range from 0 to 20.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: number
                            }
                        }
                        "string-origins:gamemode": {
                            gamemode: {
                                desc: Name of the gamemode the player should have in order for this condition to evaluate to true.
                                enum: ["survival", "creative", "adventure", "spectator"]
                            }
                        }
                        "string-origins:health": {
                            comparison: {
                                desc: How the player's health should be compared to the specified value. Ranges from 0 - 20.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: number
                            }
                        }
                        "string-origins:in_block_anywhere": {
                            block_condition: {
                                desc: The block condition which blocks need to fulfill in order to count for this condition.
                                link: block_cond
                            }
                            comparison: {
                                desc: How the number of blocks which overlap and fulfill block_condition should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                                default: 1
                            }
                        }
                        "string-origins:in_block": {
                            block_condition: {
                                desc: The block condition which is applied to the block at the player's lower body half.
                                link: block_cond
                            }
                        }
                        "string-origins:in_rain": {}
                        "string-origins:in_tag": {
                            tag: {
                                desc: ID of the tag the entity type needs to be in to pass the check.
                                type: string
                                allow: *a-z0-9_\/:.-
                            }
                        }
                        "string-origins:invisible": {}
                        "string-origins:living": {}
                        "string-origins:moving": {}
                        "string-origins:nbt": {
                            nbt: {
                                desc: The NBT data to check for
                                type: string
                                ext: true
                            }
                        }
                        "string-origins:on_block": {
                            block_condition: {
                                desc: If set, a block that satisfies this block condition needs to be right below the player's feet.
                                link: block_cond
                            }
                        }
                        "string-origins:on_fire": {}
                        "string-origins:origin": {
                            origin: {
                                desc: ID of the origin the player needs to have to pass the check.
                                type: string
                                allow: *a-z0-9_\/:.-
                                ns: true
                            }
                            layer: {
                                desc: If set, will check only the layer with the provided ID for the origin. By default it will check in any layer.
                                type: string
                                allow: *a-z0-9_\/:.-
                                ns: true
                            }
                        }
                        "string-origins:passenger_recursive": {
                            bientity_condition: {
                                desc: If specified, only check for the entities that fulfills the bi-entity condition.
                                link: bi_entity_cond
                            }
                            comparison: {
                                desc: How the amount of entities that are currently riding the entity should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: Which value the amount of entities currently riding the entity should be compared to.
                                type: integer
                                default: 1
                            }
                        }
                        "string-origins:passenger": {
                            bientity_condition: {
                                desc: If specified, only check for the entities that fulfills the bi-entity condition.
                                link: bi_entity_cond
                            }
                            comparison: {
                                desc: How the amount of entities that are currently riding the entity should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: Which value the amount of entities currently riding the entity should be compared to.
                                type: integer
                                default: 1
                            }
                        }
                        "string-origins:power_active": {
                            power: {
                                desc: ID of the power which will be checked for being active.
                                type: string
                                allow: *a-z0-9_\/:.-
                                ns: true
                            }
                        }
                        "string-origins:power_type": {
                            power_type: {
                                desc: The namespace and ID of a power type of some power to check that the player has.
                                type: string
                                allow: *a-z0-9_\/:.-
                                ns: true
                            }
                        }
                        "string-origins:power": {
                            power: {
                                desc: ID of the power the player needs to have to pass the check.
                                type: string
                                allow: *a-z0-9_\/:.-
                                ns: true
                            }
                            source: {
                                desc: ID of the source of the power the player needs to have to pass the check.
                                type: string
                            }
                        }
                        "string-origins:predicate": {
                            predicate: {
                                desc: ID of the predicate the entity needs to pass.
                                type: string
                                allow: *a-z0-9_\/:.-
                            }
                        }
                        "string-origins:raycast": {
                            distance: {
                                desc: Determines the maximum distance the raycast will travel.
                                type: number
                                default: 20
                            }
                            block: {
                                desc: If set to false, the raycast will ignore blocks.
                                type: boolean
                                default: true
                            }
                            entity: {
                                desc: If set to false, the raycast will ignore entities.
                                type: boolean
                                default: true
                            }
                            shape_type: {
                                desc:
                                    '''
                                    Determines how the raycast handles blocks.

                                    If set to "outline", the raycast will take the shape of the collision box of the block into account.
                                    If set to "visual", the raycast will ignore blocks that are see-through (e.g: Glass, Tinted Glass, etc.).
                                    If set to "collider", the raycast will take physical collision of the block into account.
                                    '''
                                enum: ["outline", "visual", "collider"]
                            }
                            fluid_handling: {
                                desc:
                                    '''
                                    Determines how the raycast handles fluids.

                                    If set to "any", the raycast will ignore source and flowing fluids.
                                    If set to "source", the raycast will only go through source fluids.
                                    If set to "none", the raycast won't go through any kind of fluids.
                                    '''
                                enum: ["any", "source", "none"]
                                gap: true
                            }
                            match_bientity_condition: {
                                desc: If specified, the entity condition type will check if this bi-entity condition type is fulfilled by the entity that the raycast has gone through. If not, the entity will be ignored.
                                link: bi_entity_cond
                            }
                            hit_bientity_condition: {
                                desc: If specified, the entity condition type will check if the entity that was hit by the raycast fulfills this bi-entity condition type.
                                link: bi_entity_cond
                            }
                            block_condition: {
                                desc: If specified, the entity condition type will check if the block that was hit by the raycast fulfills this block condition type.
                                link: block_cond
                            }
                        }
                        "string-origins:relative_health": {
                            comparison: {
                                desc: How the relative health of the player should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: number
                            }
                        }
                        "string-origins:resource": {
                            resource: {
                                desc: ID of the power type that defines the resource. Must be a Resource (Power Type) which exists on the player.
                                type: string
                                allow: *a-z0-9_#\/:.-
                                ns: true
                            }
                            comparison: {
                                desc: How the resource's value should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                            }
                        }
                        "string-origins:riding_recursive": {
                            bientity_condition: {
                                desc: If specified, only check for the entities that fulfills the bi-entity condition.
                                link: bi_entity_cond
                            }
                            comparison: {
                                desc: How the amount of entities currently being ridden should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: Which value the amount of entities currently being ridden should be compared to.
                                type: integer
                                default: 1
                            }
                        }
                        "string-origins:riding_root": {
                            bientity_condition: {
                                desc: If specified, only check for the entities that fulfills the bi-entity condition.
                                link: bi_entity_cond
                            }
                        }
                        "string-origins:riding": {
                            bientity_condition: {
                                desc: If specified, only check for the entities that fulfills the bi-entity condition.
                                link: bi_entity_cond
                            }
                        }
                        "string-origins:saturation_level": {
                            comparison: {
                                desc: How the saturation level should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: number
                            }
                        }
                        "string-origins:scoreboard": {
                            objective: {
                                desc: The name of the scoreboard objective to retrieve the value from (referred to as the score) and compare.
                                type: string
                            }
                            comparison: {
                                desc: How the player's score should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                            }
                        }
                        "string-origins:sneaking": {}
                        "string-origins:sprinting": {}
                        "string-origins:status_effect": {
                            effect: {
                                desc: ID of the status effect the player should have.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            min_amplifier: {
                                desc: The minimum amplifier the status effect should have in order to pass the check. Defaults to 0.
                                type: integer
                                min: 0
                                max: 2147483647
                            }
                            max_amplifier: {
                                desc: The maximum amplifier the status effect should have in order to pass the check. Defaults to 2147483647.
                                type: integer
                                min: 0
                                max: 2147483647
                            }
                            min_duration: {
                                desc: The minimum duration the status effect should have in order to pass the check. Defaults to 0.
                                type: integer
                                min: 0
                                max: 2147483647
                            }
                            max_duration: {
                                desc: The maximum duration the status effect should have in order to pass the check. Defaults to 2147483647.
                                type: integer
                                min: 0
                                max: 2147483647
                            }
                        }
                        "string-origins:submerged_in": {
                            fluid: {
                                desc: Submerged means the entities' eyes are inside that fluid. ID of the fluid tag that should be checked. Most important examples: minecraft:water and minecraft:lava.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                        }
                        "string-origins:swimming": {}
                        "string-origins:tamed": {}
                        "string-origins:using_effective_tool": {}
                        "string-origins:using_item": {
                            item_condition: {
                                desc: If specified, the condition will only pass if the item that is being used fulfills this condition.
                                link: item_cond
                            }
                        }
                        "string-origins:xp_levels": {
                            comparison: {
                                desc: How the experience level of the player should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                            }
                        }
                        "string-origins:xp_points": {
                            comparison: {
                                desc: How the experience points of the player should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                            }
                        }
                    }
                }
            }
        }
        item_cond: {
            type: object
            props: {
                inverted: {
                    desc: Whether or not this condition is inverted (This condition passes only when the conditions are NOT met).
                    type: boolean
                }
                type: {
                    enum: [
                        origins:and
                        origins:or
                        origins:constant
                        origins:empty
                        origins:amount
                        origins:armor_value
                        origins:enchantment
                        origins:fireproof
                        origins:food
                        origins:harvest_level
                        origins:ingredient
                        origins:meat
                        origins:nbt
                        origins:smeltable
                    ]
                    more: {
                        "string-origins:and": {
                            conditions: {
                                desc: All of these conditions have to be fulfilled in order for this condition to be fulfilled.
                                type: list
                                vals: {link: "item_cond"}
                            }
                        }
                        "string-origins:or": {
                            conditions: {
                                desc: At least one of these conditions have to be fulfilled in order for this condition to be fulfilled.
                                type: list
                                vals: {link: "item_cond"}
                            }
                        }
                        "string-origins:constant": {
                            value: {
                                desc: If true, the condition is always fulfilled. If false, the condition is never fulfilled.
                                type: boolean
                                default: false
                            }
                        }
                        "string-origins:empty": {}
                        "string-origins:amount": {
                            comparison: {
                                desc: Determines how to compare the number of items in this stack to the specified value
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                            }
                        }
                        "string-origins:armor_value": {
                            comparison: {
                                desc: How the item's armor value should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                            }
                        }
                        "string-origins:enchantment": {
                            enchantment: {
                                desc: ID of the enchantment of interest to check the level of on the item, e.g. minecraft:protection.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            comparison: {
                                desc: How the enchantment level should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                            }
                        }
                        "string-origins:fireproof": {}
                        "string-origins:food": {}
                        "string-origins:harvest_level": {
                            comparison: {
                                desc: How the item's harvest level should be compared to the specified value. Click to visit the wiki to learn more about harvest levels.
                                href: https://minecraft.fandom.com/wiki/Tiers
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                            }
                        }
                        "string-origins:ingredient": {
                            ingredient: {
                                desc: An ingredient, which can be a variety of things.
                                href: https://origins.readthedocs.io/en/latest/data_types/ingredient/
                                id: recipes-6
                                link: oritem
                            }
                        }
                        "string-origins:meat": {}
                        "string-origins:nbt": {
                            nbt: {
                                desc: The NBT data to check for.
                                type: string
                                ext: true
                            }
                        }
                        "string-origins:smeltable": {}
                    }
                }
            }
        }
        block_cond: {
            type: object
            props: {
                inverted: {
                    desc: Whether or not this condition is inverted (This condition passes only when the conditions are NOT met).
                    type: boolean
                }
                type: {
                    enum: [
                        origins:and
                        origins:or
                        origins:constant
                        origins:adjacent
                        origins:attachable
                        origins:blast_resistance
                        origins:block
                        origins:block_state
                        origins:distance_from_coordinates
                        origins:exposed_to_sky
                        origins:fluid
                        origins:hardness
                        origins:height
                        origins:in_tag
                        origins:light_blocking
                        origins:light_level
                        origins:material
                        origins:movement_blocking
                        origins:nbt
                        origins:offset
                        origins:replacable
                        origins:slipperiness
                        origins:water_loggable
                    ]
                    more: {
                        "string-origins:and": {
                            conditions: {
                                desc: All of these conditions have to be fulfilled in order for this condition to be fulfilled.
                                type: list
                                vals: {link: "block_cond"}
                            }
                        }
                        "string-origins:or": {
                            conditions: {
                                desc: At least one of these conditions have to be fulfilled in order for this condition to be fulfilled.
                                type: list
                                vals: {link: "block_cond"}
                            }
                        }
                        "string-origins:constant": {
                            value: {
                                desc: If true, the condition is always fulfilled. If false, the condition is never fulfilled.
                                type: boolean
                                default: false
                            }
                        }
                        "string-origins:adjacent": {
                            adjacent_condition: {
                                desc: The block condition that needs to be fulfilled by adjacent blocks to count towards this condition.
                                link: block_cond
                            }
                            comparison: {
                                desc: How the number of adjacent blocks which fulfill adjacent_condition should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                            }
                        }
                        "string-origins:attachable": {}
            "string-origins:blast_resistance": {
                comparison: {
                                desc: Determines how the blast resistance of the block is compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare the blast resistance of the block to.
                                type: integer
                            }
            }
                        "string-origins:block": {
                            block: {
                                desc: ID of the block that this block needs to be to pass the check.
                                href: https://minecraft.fandom.com/wiki/Java_Edition_data_values/Blocks
                                type: string
                                allow: *a-z0-9_\/:.-
                            }
                        }
                        "string-origins:block_state": {
                            property: {
                                desc: The name of the property that should be checked. Examples are facing or age. See: Block States (MC Wiki)
                                type: string
                            }
                            comparison: {
                                desc: If the property contains an integer value, this is the comparison the will be used to compare the property's value to the specified compare_to integer.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to if the property is an integer.
                                type: integer
                            }
                            value: {
                                desc: If the property contains a boolean value, this is the value the property needs to be to pass the check.
                                enum: [true, false]
                                unspec: true
                            }
                            enum: {
                                desc: If the property contains different string values, this is the string value the property needs to be to pass the check.
                                type: string
                            }
                        }
                        "string-origins:distance_from_coordinates": {
                            reference: {
                                desc: The point to compare the distance to.
                                enum: ["world_origin", "world_spawn"]
                            }
                            offset: {
                                desc: If specified, determines how much the reference point should be offset.
                                link: vector
                            }
                            ignore_x: {
                                desc: Determines whether to consider the X axis to be 0.
                                type: boolean
                            }
                            ignore_y: {
                                desc: Determines whether to consider the Y axis to be 0.
                                type: boolean
                            }
                            ignore_z: {
                                desc: Determines whether to consider the Z axis to be 0.
                                type: boolean
                            }
                            shape: {
                                desc: Determines the shape of the check. Accepts "cube", "star" or "sphere".
                                enum: ["cube", "star", "sphere"]
                            }
                            scale_reference_to_dimension: {
                                desc: Determines whether to check for the reference point whilst considering the coordinate scale of the dimension.
                                type: boolean
                                default: true
                            }
                            result_on_the_wrong_dimension: {
                                desc: If specified, this value will override the result of the comparison if the block being tested is not in the reference's dimension.
                                type: boolean
                            }
                            round_to_digit: {
                                desc: If specified, rounds the result to the closest number with the specified amount of digits after the comma. Negative numbers also work.
                                type: integer
                            }
                            comparison: {
                                desc: Determines how the calculated distance is compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare the calculated distance to.
                                type: number
                            }
                        }
                        "string-origins:exposed_to_sky": {}
                        "string-origins:fluid": {
                            fluid_condition: {
                                desc: The fluid condition to check the fluid state at the position.
                                link: fluid_cond
                            }
                        }
                        "string-origins:hardness": {
                            comparison: {
                                desc: Determines how the hardness value of the block is compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare the hardness value of the block to.
                                type: integer
                            }
                        }
                        "string-origins:height": {
                            comparison: {
                                desc: How the Y position of the block should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: number
                            }
                        }
                        "string-origins:in_tag": {
                            tag: {
                                desc: ID of the tag which the block should be in to pass the check.
                                type: string
                                allow: *a-z0-9_\/:.-
                            }
                        }
                        "string-origins:light_blocking": {}
                        "string-origins:light_level": {
                            light_type: {
                                desc: The type of light level to compare. Either sky or block. If no type is provided, the greater value of the two types will be used, which is the "resulting" light level of that position.
                                enum: ["sky", "block"]
                                unspec: true
                            }
                            comparison: {
                                desc: How the light level should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: integer
                            }
                        }
                        "string-origins:material": {
                            material: {
                                desc: If specified, checks if the block classifies as this material. Click to see a list of valid materials.
                                type: string
                                allow: *a-z0-9_\/:.-
                                href: https://origins.readthedocs.io/en/latest/misc/extras/materials/
                            }
                            materials: {
                                desc: If specified, checks if the block classifies as one of these materials.
                                type: list
                                vals: {
                                    type: string
                                    allow: *a-z0-9_\/:.-
                                }
                            }
                        }
                        "string-origins:movement_blocking": {}
                        "string-origins:nbt": {
                            nbt: {
                                desc: The NBT data to check for
                                type: string
                                ext: true
                            }
                        }
                        "string-origins:offset": {
                            condition: {
                                desc: The condition to check with the given offset.
                                link: block_cond
                            }
                            x: {
                                desc: How much to offset the position on the x-axis. Defaults to 0.
                                type: integer
                            }
                            y: {
                                desc: How much to offset the position on the y-axis. Defaults to 0.
                                type: integer
                            }
                            z: {
                                desc: How much to offset the position on the z-axis. Defaults to 0.
                                type: integer
                            }
                        }
                        "string-origins:replacable": {}
                        "string-origins:slipperiness": {
                            comparison: {
                                desc: Determines how the slipperiness value of the block is compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare the slipperiness value of the block to.
                                type: integer
                            }
                        }
                        "string-origins:water_loggable": {}
                    }
                }
            }
        }
        fluid_cond: {
            type: object
            props: {
                inverted: {
                    desc: Whether or not this condition is inverted (This condition passes only when the conditions are NOT met).
                    type: boolean
                }
                type: {
                    enum: [
                        origins:and
                        origins:or
                        origins:constant
                        origins:empty
                        origins:fluid
                        origins:in_tag
                        origins:still
                    ]
                    more: {
                        "string-origins:and": {
                            conditions: {
                                desc: All of these conditions have to be fulfilled in order for this condition to be fulfilled.
                                type: list
                                vals: {link: "fluid_cond"}
                            }
                        }
                        "string-origins:or": {
                            conditions: {
                                desc: At least one of these conditions have to be fulfilled in order for this condition to be fulfilled.
                                type: list
                                vals: {link: "fluid_cond"}
                            }
                        }
                        "string-origins:constant": {
                            value: {
                                desc: If true, the condition is always fulfilled. If false, the condition is never fulfilled.
                                type: boolean
                                default: false
                            }
                        }
                        "string-origins:empty": {}
                        "string-origins:fluid": {
                            fluid: {
                                desc: ID of the fluid to match. Vanilla examples are minecraft:water and minecraft:lava.
                                type: string
                                allow: *a-z0-9_\/:.-
                            }
                        }
                        "string-origins:in_tag": {
                            tag: {
                                desc: ID of the tag which the fluid should be in to pass the check.
                                type: string
                                allow: *a-z0-9_\/:.-
                            }
                        }
                        "string-origins:still": {}
                    }
                }
            }
        }
        biome_cond: {
            type: object
            props: {
                inverted: {
                    desc: Whether or not this condition is inverted (This condition passes only when the conditions are NOT met).
                    type: boolean
                }
                type: {
                    enum: [
                        origins:and
                        origins:or
                        origins:constant
                        origins:category
                        origins:high_humidity
                        origins:precipitation
                        origins:temperature
                    ]
                    more: {
                        "string-origins:and": {
                            conditions: {
                                desc: All of these conditions have to be fulfilled in order for this condition to be fulfilled.
                                type: list
                                vals: {link: "biome_cond"}
                            }
                        }
                        "string-origins:or": {
                            conditions: {
                                desc: At least one of these conditions have to be fulfilled in order for this condition to be fulfilled.
                                type: list
                                vals: {link: "biome_cond"}
                            }
                        }
                        "string-origins:constant": {
                            value: {
                                desc: If true, the condition is always fulfilled. If false, the condition is never fulfilled.
                                type: boolean
                                default: false
                            }
                        }
                        "string-origins:category": {
                            category: {
                                desc: Which category the biome must be in order to succeed the check. Click to see the list of biome categories in vanilla.
                                href: https://origins.readthedocs.io/en/latest/misc/biome_categories/
                                type: string
                            }
                        }
                        "string-origins:high_humidity": {}
                        "string-origins:precipitation": {
                            precipitation: {
                                desc: Which precipitation the biome has to have in order to succeed the check. One of none, rain and snow.
                                enum: ["none", "rain", "snow"]
                            }
                        }
                        "string-origins:temperature": {
                            comparison: {
                                desc: How the temperature of the biome should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: number
                            }
                        }
                    }
                }
            }
        }
        damage_cond: {
            type: object
            props: {
                inverted: {
                    desc: Whether or not this condition is inverted (This condition passes only when the conditions are NOT met).
                    type: boolean
                }
                type: {
                    enum: [
                        origins:and
                        origins:or
                        origins:constant
                        origins:amount
                        origins:attacker
                        origins:fire
                        origins:name
                        origins:projectile
                    ]
                    more: {
                        "string-origins:and": {
                            conditions: {
                                desc: All of these conditions have to be fulfilled in order for this condition to be fulfilled.
                                type: list
                                vals: {link: "damage_cond"}
                            }
                        }
                        "string-origins:or": {
                            conditions: {
                                desc: At least one of these conditions have to be fulfilled in order for this condition to be fulfilled.
                                type: list
                                vals: {link: "damage_cond"}
                            }
                        }
                        "string-origins:constant": {
                            value: {
                                desc: If true, the condition is always fulfilled. If false, the condition is never fulfilled.
                                type: boolean
                                default: false
                            }
                        }
                        "string-origins:amount": {
                            comparison: {
                                desc: How the amount of damage should be compared to the specified value.
                                link: comparison
                            }
                            compare_to: {
                                desc: The value to compare to.
                                type: number
                            }
                        }
                        "string-origins:attacker": {
                            entity_condition: {
                                desc: If set, the attacking entity must fulfill the provided entity condition in order for this condition to evaluate to true.
                                link: entity_cond
                            }
                        }
                        "string-origins:fire": {}
                        "string-origins:name": {
                            name: {
                                desc: Name the damage source should have to pass the check. Click to see a list of vanilla damage source names.
                                href: https://origins.readthedocs.io/en/latest/misc/vanilla_damage_sources/
                                type: string
                            }
                        }
                        "string-origins:projectile": {
                            projectile: {
                                desc: If set, the check will only pass if the projectile was of an entity type with this ID.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                        }
                    }
                }
            }
        }

        bi_entity_action: {
            type: object
            props: {
                type: {
                    enum: [
                        origins:nothing
                        origins:and
                        origins:chance
                        origins:choice
                        origins:delay
                        origins:if_else
                        origins:if_else_list
                        origins:invert
                        origins:actor_action
                        origins:add_velocity
                        origins:damage
                        origins:mount
                        origins:set_in_love
                        origins:tame
                        origins:target_action
                    ]
                    more: {
                        "string-origins:nothing": {}
                        "string-origins:and": {
                            actions: {
                                desc: These actions will be executed one after the other (but in the same tick).
                                type: list
                                vals: {link: "bi_entity_action"}
                            }
                        }
                        "string-origins:chance": {
                            chance: {
                                desc: The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance)
                                type: number
                            }
                            action: {
                                desc: The action which might be executed.
                                link: bi_entity_action
                            }
                        }
                        "string-origins:choice": {
                            actions: {
                                desc: A list of actions, one of which is choosen randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.
                                type: list
                                vals: {
                                    type: object
                                    props: {
                                        weight: {
                                            desc: The chance of this action being executed is weight/total_weight_of_actions
                                            type: integer
                                            default: 1
                                        }
                                        element: {
                                            desc: The action which might be executed.
                                            link: bi_entity_action
                                        }
                                    }
                                }
                            }
                        }
                        "string-origins:delay": {
                            action: {
                                desc: The action which will be executed after the delay.
                                link: bi_entity_action
                            }
                            ticks: {
                                desc: The amount of ticks until the action is executed.
                                type: integer
                            }
                        }
                        "string-origins:if_else": {
                            condition: {
                                desc: If this condition holds then if_action is executed, otherwise else_action or no action is executed.
                                link: bi_entity_cond
                            }
                            if_action: {
                                desc: The action which is executed when the condition evaluates to true.
                                link: bi_entity_action
                            }
                            else_action: {
                                desc: If present, this action will be executed when the condition evaluates to false.
                                link: bi_entity_action
                            }
                        }
                        "string-origins:if_else_list": {
                            actions: {
                                desc: A list of actions associated with conditions to check. The first one in the list for which the condition holds will be executed. Basically a less indentation-heavy way to represent a deeply nested If-Else Action.
                                type: list
                                vals: {
                                    type: object
                                    props: {
                                        condition: {
                                            desc: A condition to check for.
                                            link: bi_entity_cond
                                        }
                                        action: {
                                            desc: An action which might be executed.
                                            link: bi_entity_action
                                        }
                                    }
                                }
                            }
                        }
                        "string-origins:invert": {
                            bientity_action: {
                                desc: The bi-entity action to execute which will have its 'target' and 'actor' contexts swapped.
                                link: bi_entity_action
                            }
                        }
                        "string-origins:actor_action": {
                            action: {
                                desc: The action to execute on the actor entity.
                                link: entity_action
                            }
                        }
                        "string-origins:add_velocity": {
                            x: {
                                desc: The amount of velocity to add on the x-axis. Defaults to 0.
                                type: number
                            }
                            y: {
                                desc: The amount of velocity to add on the y-axis. Defaults to 0.
                                type: number
                            }
                            z: {
                                desc: The amount of velocity to add on the z-axis. Defaults to 0.
                                type: number
                            }
                            client: {
                                desc: If this is false, the action will not execute on the client.
                                type: boolean
                            }
                            server: {
                                desc: If this is false, the action will not execute on the server.
                                type: boolean
                            }
                            set: {
                                desc: If this is true, the action will act as a "set" velocity action, overriding the entity's current velocity instead of adding to it.
                                type: boolean
                            }
                        }
                        "string-origins:damage": {
                            amount: {
                                desc: The amount of damage to deal.
                                type: number
                                min: 0
                            }
                            source: {
                                desc: The damage source to be used. Controls e.g. the death message, invulnerabilities (e.g. towards fire), or whether armor is taken into account.
                                link: damage_source
                            }
                        }
                        "string-origins:mount": {}
                        "string-origins:set_in_love": {}
                        "string-origins:tame": {}
                        "string-origins:target_action": {
                            action: {
                                desc: The action to execute on the target entity.
                                link: entity_action
                            }
                        }
                    }
                }
            }
        }
        entity_action: {
            type: object
            props: {
                type: {
                    enum: [
                        origins:nothing
                        origins:and
                        origins:chance
                        origins:choice
                        origins:delay
                        origins:if_else
                        origins:if_else_list
                        origins:add_velocity
                        origins:add_xp
                        origins:apply_effect
                        origins:area_of_effect
                        origins:block_action_at
                        origins:change_resource
                        origins:clear_effect
                        origins:crafting_table
                        origins:damage
                        origins:dismount
                        origins:emit_game_event
                        origins:ender_chest
                        origins:equipped_item_action
                        origins:execute_command
                        origins:exhaust
                        origins:explode
                        origins:extinguish
                        origins:feed
                        origins:gain_air
                        origins:give
                        origins:grant_power
                        origins:heal
                        origins:passenger_action
                        origins:play_sound
                        origins:raycast
                        origins:revoke_power
                        origins:riding_action
                        origins:set_fall_distance
                        origins:set_on_fire
                        origins:set_resource
                        origins:spawn_effect_cloud
                        origins:spawn_entity
                        origins:spawn_particles
                        origins:swing_hand
                        origins:toggle
                        origins:trigger_cooldown
                    ]
                    more: {
                        "string-origins:nothing": {}
                        "string-origins:and": {
                            actions: {
                                desc: These actions will be executed one after the other (but in the same tick).
                                type: list
                                vals: {link: "entity_action"}
                            }
                        }
                        "string-origins:chance": {
                            chance: {
                                desc: The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance)
                                type: number
                            }
                            action: {
                                desc: The action which might be executed.
                                link: entity_action
                            }
                        }
                        "string-origins:choice": {
                            actions: {
                                desc: A list of actions, one of which is choosen randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.
                                type: list
                                vals: {
                                    type: object
                                    props: {
                                        weight: {
                                            desc: The chance of this action being executed is weight/total_weight_of_actions
                                            type: integer
                                            default: 1
                                        }
                                        element: {
                                            desc: The action which might be executed.
                                            link: entity_action
                                        }
                                    }
                                }
                            }
                        }
                        "string-origins:delay": {
                            action: {
                                desc: The action which will be executed after the delay.
                                link: entity_action
                            }
                            ticks: {
                                desc: The amount of ticks until the action is executed.
                                type: integer
                            }
                        }
                        "string-origins:if_else": {
                            condition: {
                                desc: If this condition holds then if_action is executed, otherwise else_action or no action is executed.
                                link: entity_cond
                            }
                            if_action: {
                                desc: The action which is executed when the condition evaluates to true.
                                link: entity_action
                            }
                            else_action: {
                                desc: If present, this action will be executed when the condition evaluates to false.
                                link: entity_action
                            }
                        }
                        "string-origins:if_else_list": {
                            actions: {
                                desc: A list of actions associated with conditions to check. The first one in the list for which the condition holds will be executed. Basically a less indentation-heavy way to represent a deeply nested If-Else Action.
                                type: list
                                vals: {
                                    type: object
                                    props: {
                                        condition: {
                                            desc: A condition to check for.
                                            link: entity_cond
                                        }
                                        action: {
                                            desc: An action which might be executed.
                                            link: entity_action
                                        }
                                    }
                                }
                            }
                        }
                        "string-origins:add_velocity": {
                            x: {
                                desc: The amount of velocity to add on the x-axis. Defaults to 0.
                                type: number
                            }
                            y: {
                                desc: The amount of velocity to add on the y-axis. Defaults to 0.
                                type: number
                            }
                            z: {
                                desc: The amount of velocity to add on the z-axis. Defaults to 0.
                                type: number
                            }
                            space: {
                                desc: The space to perform the velocity addition in.
                                href: https://origins.readthedocs.io/en/latest/misc/space/
                                enum: [
                                    world
                                    local
                                    local_horizontal
                                    local_horizontal_normalized
                                    velocity
                                    velocity_normalized
                                    velocity_horizontal
                                    velocity_horizontal_normalized
                                ]
                            }
                            set: {
                                desc: If this is true, the action will act as a "set" velocity action, overriding the entity's current velocity instead of adding to it.
                                type: boolean
                            }
                        }
                        "string-origins:add_xp": {
                            points: {
                                desc: If set, this is the amount experience points that will be given to the player. Can not be negative.
                                type: integer
                                min: 0
                            }
                            levels: {
                                desc: If set, this is the amount experience levels that will be given to the player. Can be negative and thus used to subtract levels.
                                type: integer
                            }
                        }
                        "string-origins:apply_effect": {
                            effect: {
                                desc: If set, this status effect will be applied by this action.
                                link: effect
                            }
                            effects: {
                                desc: If set, these status effects will be applied by this action.
                                type: list
                                vals: {link: "effect"}
                            }
                        }
                        "string-origins:area_of_effect": {
                            radius: {
                                desc: Determines the radius of the area. Defaults to 16.
                                type: number
                                default: 16
                            }
                            include_target: {
                                desc: Determines whether the entity this action was executed on is included in the radius check.
                                type: boolean
                            }
                            bientity_condition: {
                                desc: If specified, only execute the specified bi-entity action if this bi-entity condition type is fulfilled by either or both the 'actor' (the entity that has the power) or 'target' (the entities within the specified radius).
                                link: bi_entity_cond
                            }
                            bientity_action: {
                                desc: If specified, this bi-entity action type may be executed on either or both the 'actor' (the entity that has the power) and target (the entities within the specified radius).
                                link: bi_entity_action
                            }
                        }
                        "string-origins:block_action_at": {
                            block_action: {
                                desc: The block action to execute at the position of the entity.
                                link: block_action
                            }
                        }
                        "string-origins:change_resource": {
                            resource: {
                                desc: ID of the power type that defines the resource to change the value of. Must be a Resource (Power Type) which exists on the player.
                                type: string
                                allow: *a-z0-9_#\/:.-
                                ns: true
                            }
                            change: {
                                desc: This value will be added to the resource (won't go below min or above max of the Resource Resource (Power Type)).
                                type: integer
                            }
                            operation: {
                                desc: Determines if the action should add or set the value of the resource. Accepts "add" or "set".
                                enum: ["add", "set"]
                            }
                        }
                        "string-origins:clear_effect": {
                            effect: {
                                desc: If specified, the effect with this ID will be cleared. If not specified, all effects will be cleared.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                        }
                        "string-origins:crafting_table": {}
                        "string-origins:damage": {
                            amount: {
                                desc: The amount of damage to deal.
                                type: number
                                min: 0
                            }
                            source: {
                                desc: The damage source to be used. Controls e.g. the death message, invulnerabilities (e.g. towards fire), or whether armor is taken into account.
                                link: damage_source
                            }
                        }
                        "string-origins:dismount": {}
                        "string-origins:emit_game_event": {
                            event: {
                                desc: The ID of a game event to emit. Click to see vanilla game events.
                                href: https://minecraft.fandom.com/wiki/Sculk_Sensor#Vibration_amplitudes
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                        }
                        "string-origins:ender_chest": {}
                        "string-origins:equipped_item_action": {
                            equipment_slot: {
                                desc: Which equipped item to execute the action on.
                                enum: ["mainhand", "offhand", "head", "chest", "legs", "feet"]
                            }
                            action: {
                                desc: The item action to execute.
                                link: item_action
                            }
                        }
                        "string-origins:execute_command": {
                            command: {
                                desc: The command to execute (from the perspective of the entity!).
                                type: string
                                ext: true
                            }
                        }
                        "string-origins:exhaust": {
                            amount: {
                                desc: The amount of exhaustion to apply to the player.
                                type: number
                            }
                        }
                        "string-origins:explode": {
                            power: {
                                desc: Determines the power of the explosion.
                                type: number
                            }
                            destruction_type: {
                                desc: Determines if the explosion should destroy the terrain, destroy the terrain and drop the loot of the blocks, or none. Accepts either "destroy", "break" or "none".
                                enum: ["break", "destroy", "none"]
                            }
                            damage_self: {
                                desc: Determines if the player should take damage from the explosion.
                                type: boolean
                                default: true
                            }
                            indestructible: {
                                desc: If set, blocks specified in this block condition object is not destroyed by the explosion.
                                link: block_cond
                            }
                            destructible: {
                                desc: If set, blocks specified in this block condition object will be the only blocks destroyed by the explosion.
                                link: block_cond
                            }
                            create_fire: {
                                desc: Determines if the explosion should create fire.
                                type: boolean
                            }
                        }
                        "string-origins:extinguish": {}
                        "string-origins:feed": {
                            food: {
                                desc: The food amount to restore.
                                type: integer
                            }
                            saturation: {
                                desc: The saturation amount to restore.
                                type: number
                            }
                        }
                        "string-origins:gain_air": {
                            value: {
                                desc: The amount of breath to restore.
                                type: integer
                            }
                        }
                        "string-origins:give": {
                            stack: {
                                desc: The item stack to give to the entity.
                                link: item_stack
                            }
                            item_action: {
                                desc: If set, executes an item action on the item stack before it's given to the player.
                                link: item_action
                            }
                            preferred_slot: {
                                desc: If set, this will prioritize the action to put the item in the specified slot. Accepts "chest", "feet", "head", "legs", "mainhand" or "offhand".
                                enum: ["chest", "feet", "head", "legs", "mainhand", "offhand"]
                                unspec: true
                            }
                        }
                        "string-origins:grant_power": {
                            power: {
                                desc: The ID of the power to be granted to the entity.
                                type: string
                                allow: *a-z0-9_#\/:.-
                                ns: true
                            }
                            source: {
                                desc: The source of the power. Can realistically be anything, but make sure to keep note of it.
                                type: string
                            }
                        }
                        "string-origins:heal": {
                            amount: {
                                desc: The amount of health to restore.
                                type: number
                            }
                        }
                        "string-origins:passenger_action": {
                            action: {
                                desc: If set, executes the specified action on the passenger entity.
                                link: entity_action
                            }
                            bientity_action: {
                                desc: If set, executes the specified action that can execute on both the passenger and the entity that's being ridden.
                                link: bi_entity_action
                            }
                            bientity_condition: {
                                desc: If set, only execute the specified actions if the bi-entity condition is fulfilled.
                                link: bi_entity_cond
                            }
                            recursive: {
                                desc: If set to true, executes the specified actions on all the passenger entities, if there are more than one.
                                type: boolean
                            }
                        }
                        "string-origins:play_sound": {
                            sound: {
                                desc: ID of the sound to play.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            volume: {
                                desc: The volume of the sound.
                                type: number
                                default: 1
                                min: 0
                                max: 1
                            }
                            pitch: {
                                desc: The pitch of the sound.
                                type: number
                                default: 1
                                min: 0
                                max: 2
                            }
                        }
                        "string-origins:raycast": {
                            distance: {
                                desc: Determines the maximum distance the raycast will travel.
                                type: number
                                default: 20
                            }
                            block: {
                                desc: If set to false, the raycast will ignore blocks.
                                type: boolean
                                default: true
                            }
                            entity: {
                                desc: If set to false, the raycast will ignore entities.
                                type: boolean
                                default: true
                            }
                            shape_type: {
                                desc:
                                    '''
                                    Determines how the raycast handles blocks.

                                    If set to "outline", the raycast will take the shape of the collision box of the block into account.
                                    If set to "visual", the raycast will ignore blocks that are see-through (e.g: Glass, Tinted Glass, etc.).
                                    If set to "collider", the raycast will take physical collision of the block into account.
                                    '''
                                enum: ["outline", "visual", "collider"]
                            }
                            fluid_handling: {
                                desc:
                                    '''
                                    Determines how the raycast handles fluids.

                                    If set to "any", the raycast will ignore source and flowing fluids.
                                    If set to "source", the raycast will only go through source fluids.
                                    If set to "none", the raycast won't go through any kind of fluids.
                                    '''
                                enum: ["any", "source", "none"]
                                gap: true
                            }
                            bientity_condition: {
                                desc: If specified, the specified bi-entity action type will only be executed if the specified bi-entity condition type is fulfilled by either or both the 'actor' (the entity that has the power) or 'target' (the entity that was hit by the raycast).
                                link: bi_entity_cond
                            }
                            bientity_action: {
                                desc: If specified, this bi-entity action type will be executed on either or both the 'actor' (the entity that has the power) or 'target' (the entity that was hit by the raycast).
                                link: bi_entity_action
                            }
                            block_action: {
                                desc: If specified, this block action type will be executed on the block the raycast has hit.
                                link: block_action
                                gap: true
                            }
                            before_action: {
                                desc: If specified, execute this entity action type before casting a ray.
                                link: entity_action
                            }
                            hit_action: {
                                desc: If specified, execute this entity action type if the raycast has hit an entity/block.
                                link: entity_action
                            }
                            miss_action: {
                                desc: If specified, execute this entity action type if the raycast did not hit an entity/block.
                                link: entity_action
                            }
                            command_at_hit: {
                                desc: The command to execute upon the block/entity the raycast has hit.
                                type: string
                                ext: true
                            }
                            command_hit_offset: {
                                desc: Determines the offset of the command specified in the command_at_hit field.
                                type: number
                            }
                            command_along_ray: {
                                desc: The command to execute for each step of the raycast.
                                type: string
                                ext: true
                            }
                            command_step: {
                                desc: Determines the size of the step of the raycast. Defaults to 1.
                                type: number
                            }
                            command_along_ray_only_on_hit: {
                                desc: Determines if the command specified in the command_along_ray field should be executed only if the raycast has hit a block/entity.
                                type: boolean
                            }
                        }
                        "string-origins:revoke_power": {
                            power: {
                                desc: The ID of the power to be revoked from the entity.
                                type: string
                                allow: *a-z0-9_#\/:.-
                                ns: true
                            }
                            source: {
                                desc: The source of the power.
                                type: string
                            }
                        }
                        "string-origins:riding_action": {
                            action: {
                                desc: If set, executes the specified action on the entity that's been ridden.
                                link: entity_action
                            }
                            bientity_action: {
                                desc: If set, executes the specified action that can execute on both the passenger and the entity that's being ridden.
                                link: bi_entity_action
                            }
                            bientity_condition: {
                                desc: If set, only execute the specified actions if the bi-entity condition is fulfilled.
                                link: bi_entity_cond
                            }
                            recursive: {
                                desc: If set to true, executes the specified actions on all entities that are being ridden, if there are more than one.
                                type: boolean
                            }
                        }
                        "string-origins:set_fall_distance": {
                            fall_distance: {
                                desc: The desired fall distance value.
                                type: number
                            }
                        }
                        "string-origins:set_on_fire": {
                            duration: {
                                desc: The amount of seconds the entity should burn.
                                type: integer
                                default: 4
                            }
                        }
                        "string-origins:set_resource": {
                            resource: {
                                desc: ID of the power type that defines the resource to change the value of. Must be a Resource (Power Type) which exists on the player.
                                type: string
                                allow: *a-z0-9_#\/:.-
                                ns: true
                            }
                            value: {
                                desc: The value the resource will be set to (won't go below min or above max of the Resource).
                                type: integer
                            }
                        }
                        "string-origins:spawn_effect_cloud": {
                            radius: {
                                desc: The radius of the cloud.
                                type: number
                                default: 3
                            }
                            radius_on_use: {
                                desc: How much the radius should change when an effect is applied.
                                type: number
                                default: -0.5
                            }
                            wait_time: {
                                desc: How many ticks to wait until the cloud takes effect.
                                type: integer
                                default: 10
                            }
                            effect: {
                                desc: If set, this status effect will be applied by the cloud to the entities inside it.
                                link: effect
                            }
                            effects: {
                                desc: If set, these status effects will be applied by the cloud to the entities inside it.
                                type: list
                                vals: {link: "effect"}
                            }
                        }
                        "string-origins:spawn_entity": {
                            entity_type: {
                                desc: The ID of the entity type that will be spawned.
                                type: string
                                allow: *a-z0-9_\/:.-
                            }
                            tag: {
                                desc: When set, this NBT data will be applied to the new entity when it is spawned.
                                type: string
                                ext: true
                            }
                            entity_action: {
                                desc: When set, this action will be executed on the new entity when it is spawned.
                                link: entity_action
                            }
                        }
                        "string-origins:spawn_particles": {
                            particle: {
                                desc: The particle type that will be spawned.
                                link: particle
                            }
                            count: {
                                desc: How much of the specified particle type will be spawned.
                                type: integer
                                min: 1
                                default: 1
                            }
                            speed: {
                                desc: Determines the speed of the specified particle type. Defaults to 0.
                                type: number
                            }
                            force: {
                                desc: If set to true, the specified particle type that will be spawned can be seen from a far distance.
                                type: boolean
                            }
                            spread: {
                                desc: Determines the size of the three-dimensional cuboid volume to spawn the specified particle type in. Defaults to (0.5, 0.25, 0.5).
                                link: vector
                            }
                            offset_y: {
                                desc: The offset of where the particle will be centered in the Y axis. Defaults to 0.5.
                                type: number
                            }
                        }
                        "string-origins:swing_hand": {}
                        "string-origins:toggle": {
                            power: {
                                desc: The namespace and ID of a power that uses the origins:toggle power type to toggle the state of.
                                type: string
                                allow: *a-z0-9_\/:.-
                                ns: true
                            }
                        }
                        "string-origins:trigger_cooldown": {
                            power: {
                                desc: ID of the cooldown power which should trigger, as if that power has just been used.
                                type: string
                                allow: *a-z0-9_\/:.-
                                ns: true
                            }
                        }
                    }
                }
            }
        }
        item_action: {
            type: object
            props: {
                type: {
                    enum: [
                        origins:nothing
                        origins:and
                        origins:chance
                        origins:choice
                        origins:delay
                        origins:if_else
                        origins:if_else_list
                        origins:consume
                        origins:damage
                        origins:modify
                    ]
                    more: {
                        "string-origins:nothing": {}
                        "string-origins:and": {
                            actions: {
                                desc: These actions will be executed one after the other (but in the same tick).
                                type: list
                                vals: {link: "item_action"}
                            }
                        }
                        "string-origins:chance": {
                            chance: {
                                desc: The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance)
                                type: number
                            }
                            action: {
                                desc: The action which might be executed.
                                link: item_action
                            }
                        }
                        "string-origins:choice": {
                            actions: {
                                desc: A list of actions, one of which is choosen randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.
                                type: list
                                vals: {
                                    type: object
                                    props: {
                                        weight: {
                                            desc: The chance of this action being executed is weight/total_weight_of_actions
                                            type: integer
                                            default: 1
                                        }
                                        element: {
                                            desc: The action which might be executed.
                                            link: item_action
                                        }
                                    }
                                }
                            }
                        }
                        "string-origins:delay": {
                            action: {
                                desc: The action which will be executed after the delay.
                                link: item_action
                            }
                            ticks: {
                                desc: The amount of ticks until the action is executed.
                                type: integer
                            }
                        }
                        "string-origins:if_else": {
                            condition: {
                                desc: If this condition holds then if_action is executed, otherwise else_action or no action is executed.
                                link: item_cond
                            }
                            if_action: {
                                desc: The action which is executed when the condition evaluates to true.
                                link: item_action
                            }
                            else_action: {
                                desc: If present, this action will be executed when the condition evaluates to false.
                                link: item_action
                            }
                        }
                        "string-origins:if_else_list": {
                            actions: {
                                desc: A list of actions associated with conditions to check. The first one in the list for which the condition holds will be executed. Basically a less indentation-heavy way to represent a deeply nested If-Else Action.
                                type: list
                                vals: {
                                    type: object
                                    props: {
                                        condition: {
                                            desc: A condition to check for.
                                            link: item_cond
                                        }
                                        action: {
                                            desc: An action which might be executed.
                                            link: item_action
                                        }
                                    }
                                }
                            }
                        }
                        "string-origins:consume": {
                            amount: {
                                desc: The amount of items to remove. Defaults to 1.
                                type: integer
                            }
                        }
                        "string-origins:damage": {
                            amount: {
                                desc: The amount of damage it should do to the item stack.
                                type: integer
                                default: 1
                            }
                            ignore_unbreaking: {
                                desc: Determines if this action should ignore the Unbreaking enchantment.
                                type: boolean
                            }
                        }
                        "string-origins:modify": {
                            modifier: {
                                desc: The ID of an item modifier to apply to the item stack.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                        }
                    }
                }
            }
        }
        block_action: {
            type: object
            props: {
                type: {
                    enum: [
                        origins:nothing
                        origins:and
                        origins:chance
                        origins:choice
                        origins:delay
                        origins:if_else
                        origins:if_else_list
                        origins:add_block
                        origins:bonemeal
                        origins:execute_command
                        origins:explode
                        origins:modify_block_state
                        origins:offset
                        origins:set_block
                    ]
                    more: {
                        "string-origins:nothing": {}
                        "string-origins:and": {
                            actions: {
                                desc: These actions will be executed one after the other (but in the same tick).
                                type: list
                                vals: {link: "block_action"}
                            }
                        }
                        "string-origins:chance": {
                            chance: {
                                desc: The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance)
                                type: number
                            }
                            action: {
                                desc: The action which might be executed.
                                link: block_action
                            }
                        }
                        "string-origins:choice": {
                            actions: {
                                desc: A list of actions, one of which is choosen randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.
                                type: list
                                vals: {
                                    type: object
                                    props: {
                                        weight: {
                                            desc: The chance of this action being executed is weight/total_weight_of_actions
                                            type: integer
                                            default: 1
                                        }
                                        element: {
                                            desc: The action which might be executed.
                                            link: block_action
                                        }
                                    }
                                }
                            }
                        }
                        "string-origins:delay": {
                            action: {
                                desc: The action which will be executed after the delay.
                                link: block_action
                            }
                            ticks: {
                                desc: The amount of ticks until the action is executed.
                                type: integer
                            }
                        }
                        "string-origins:if_else": {
                            condition: {
                                desc: If this condition holds then if_action is executed, otherwise else_action or no action is executed.
                                link: block_cond
                            }
                            if_action: {
                                desc: The action which is executed when the condition evaluates to true.
                                link: block_action
                            }
                            else_action: {
                                desc: If present, this action will be executed when the condition evaluates to false.
                                link: block_action
                            }
                        }
                        "string-origins:if_else_list": {
                            actions: {
                                desc: A list of actions associated with conditions to check. The first one in the list for which the condition holds will be executed. Basically a less indentation-heavy way to represent a deeply nested If-Else Action.
                                type: list
                                vals: {
                                    type: object
                                    props: {
                                        condition: {
                                            desc: A condition to check for.
                                            link: block_cond
                                        }
                                        action: {
                                            desc: An action which might be executed.
                                            link: block_action
                                        }
                                    }
                                }
                            }
                        }
                        "string-origins:add_block": {
                            block: {
                                desc: The ID of the block to place at the specified action position. Adding means setting the block at the position, offset by the direction of the action.
                                type: string
                                allow: *a-z0-9_\/:.-
                            }
                        }
                        "string-origins:bonemeal": {
                            effects: {
                                desc: Determines if the particle and other visual effects of the bonemeal-ing action should appear.
                                type: boolean
                                default: true
                            }
                        }
                        "string-origins:execute_command": {
                            command: {
                                desc: The command to execute.
                                type: string
                                ext: true
                            }
                        }
                        "string-origins:explode": {
                            power: {
                                desc: Determines the power of the explosion.
                                type: number
                            }
                            destruction_type: {
                                desc: Determines if the explosion should destroy the terrain, destroy the terrain and drop the loot of the blocks, or none. Accepts either "destroy", "break" or "none".
                                enum: ["break", "destroy", "none"]
                            }
                            damage_self: {
                                desc: Determines if the exploding block should be affected by the summoned explosion.
                                type: boolean
                                default: true
                            }
                            indestructible: {
                                desc: If set, blocks specified in this block condition object is not destroyed by the explosion.
                                link: block_cond
                            }
                            destructible: {
                                desc: If set, blocks specified in this block condition object will be the only blocks destroyed by the explosion.
                                link: block_cond
                            }
                            create_fire: {
                                desc: Determines if the explosion should create fire.
                                type: boolean
                            }
                        }
                        "string-origins:modify_block_state": {
                            property: {
                                desc: The name of the property that should be checked. Examples are facing or age. See: Block States (MC Wiki)
                                type: string
                            }
                            operation: {
                                desc: Determines how the value specified in the change field is operated on the specified property. Accepts "add" or "set".
                                enum: ["add", "set"]
                                default: 0
                            }
                            change: {
                                desc: If specified, the value to add, remove or set to/from the specified property if the specified property is an integer.
                                type: integer
                            }
                            value: {
                                desc: If specified, the boolean to use as the new value for the specified property if the specified property is a boolean.
                                type: boolean
                            }
                            enum: {
                                desc: If specified, the string to use as the new value for the specified property if the specified property is a string.
                                type: string
                            }
                            cycle: {
                                desc: If specified, cycles through all the states of the specified property, regardless if it's a string, integer, or boolean.
                                type: boolean
                            }
                        }
                        "string-origins:offset": {
                            action: {
                                desc: The action to apply with the given offset.
                                link: block_action
                            }
                            x: {
                                desc: How much to offset the position on the x-axis. Defaults to 0.
                                type: integer
                            }
                            y: {
                                desc: How much to offset the position on the y-axis. Defaults to 0.
                                type: integer
                            }
                            z: {
                                desc: How much to offset the position on the z-axis. Defaults to 0.
                                type: integer
                            }
                        }
                        "string-origins:set_block": {
                            block: {
                                desc: The ID of the block to place at the targeted position, overwriting the block already there.
                                type: string
                                allow: *a-z0-9_\/:.-
                            }
                        }
                    }
                }
            }
        }

        power_base: {
            type: object
            show: true
            props: {
                name: {
                    desc: The display name of the power. Can be a literal string or a translation key.
                    type: string
                }
                description: {
                    desc: The description of the power. Can be a literal string or a translation key.
                    type: string
                    ext: true
                    gap: true
                }
                hidden: {
                    desc: If set to true, this power will not be displayed in the power list of the origin.
                    type: boolean
                }
                loading_priority: {
                    desc: Specifies when this power is loaded. Higher numbers mean it's loaded later, which means it will override those with lower loading priorities which share the same ID.
                    type: integer
                    gap: true
                }
                badges: {
                    desc: If set, it will display icon(s) after the name of the power.
                    type: list
                    vals: {
                        type: object
                        props: {
                            sprite: {
                                desc: ID of the texture to be displayed as an icon.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            text: {
                                desc: The string to display when you hover over the icon.
                                type: string
                            }
                        }
                    }
                }
                condition: {
                    desc: If set, this power will only be active when the player with this power fulfills the condition.
                    link: entity_cond
                }
            }
        }
        power: {
            title: single
            extend: power_base
            props: {
                type: {
                    desc: ID of the desired Power Type.
                    href: https://origins.readthedocs.io/en/latest/power_types/
                    enum: [
                        origins:simple
                        origins:attribute_modify_transfer
                        origins:attribute
                        origins:burn
                        origins:climbing
                        origins:conditioned_attribute
                        origins:conditioned_restrict_armor
                        origins:cooldown
                        origins:creative_flight
                        origins:damage_over_time
                        origins:disable_regen
                        origins:effect_immunity
                        origins:elytra_flight
                        origins:entity_glow
                        origins:entity_group
                        origins:exhaust
                        origins:fire_immunity
                        origins:fire_projectile
                        origins:freeze
                        origins:ignore_water
                        origins:inventory
                        origins:invisibility
                        origins:invulnerability
                        origins:item_on_item
                        origins:keep_inventory
                        origins:launch
                        origins:lava_vision
                        origins:model_color
                        origins:night_vision
                        origins:overlay
                        origins:particle
                        origins:phasing
                        origins:recipe
                        origins:resource
                        origins:restrict_armor
                        origins:self_glow
                        origins:shader
                        origins:shaking
                        origins:stacking_status_effect
                        origins:starting_equipment
                        origins:status_bar_texture
                        origins:swimming
                        origins:toggle_night_vision
                        origins:toggle
                        origins:tooltip
                        origins:walk_on_fluid
                        origins:action_on_being_used
                        origins:action_on_block_break
                        origins:action_on_block_use
                        origins:action_on_callback
                        origins:action_on_entity_use
                        origins:action_on_hit
                        origins:action_on_item_use
                        origins:action_on_land
                        origins:action_on_wake_up
                        origins:action_over_time
                        origins:action_when_damage_taken
                        origins:action_when_hit
                        origins:active_self
                        origins:attacker_action_when_hit
                        origins:self_action_on_hit
                        origins:self_action_on_kill
                        origins:self_action_when_hit
                        origins:target_action_on_hit
                        origins:modify_air_speed
                        origins:modify_block_render
                        origins:modify_break_speed
                        origins:modify_camera_submersion
                        origins:modify_crafting
                        origins:modify_damage_dealt
                        origins:modify_damage_taken
                        origins:modify_exhaustion
                        origins:modify_falling
                        origins:modify_fluid_render
                        origins:modify_food
                        origins:modify_harvest
                        origins:modify_jump
                        origins:modify_lava_speed
                        origins:modify_player_spawn
                        origins:modify_projectile_damage
                        origins:modify_slipperiness
                        origins:modify_status_effect_amplifier
                        origins:modify_status_effect_duration
                        origins:modify_swim_speed
                        origins:modify_xp_gain
                        origins:prevent_being_used
                        origins:prevent_block_selection
                        origins:prevent_block_use
                        origins:prevent_death
                        origins:prevent_elytra_flight
                        origins:prevent_entity_collision
                        origins:prevent_entity_render
                        origins:prevent_entity_use
                        origins:prevent_feature_render
                        origins:prevent_game_event
                        origins:prevent_item_use
                        origins:prevent_sleep
                    ]
                    more: {
                        "string-origins:attribute_modify_transfer": {
                            attribute: {
                                desc: The namespace and ID of the attribute to transfer the value from.
                                type: string
                            }
                            class: {
                                desc: The path and ID of the class to transfer the value of an attribute to.
                                type: string
                            }
                            multiplier: {
                                desc: Determines the multiplier for the value. Defaults to 1.
                                type: number
                            }
                        }
                        "string-origins:attribute": {
                            modifier: {
                                desc: If specified, this modifier will be applied to its corresponding attribute.
                                link: aa_mod
                            }
                            modifiers: {
                                desc: If specified, these modifiers will be applied to their corresponding attributes.
                                type: list
                                vals: {link: "aa_mod"}
                            }
                            update_health: {
                                desc: When true, the player's health percentage will update to match their new maximum health.
                                type: boolean
                                default: false
                            }
                        }
                        "string-origins:burn": {
                            interval: {
                                desc: Interval between being set on fire, in ticks.
                                type: integer
                                min: 0
                            }
                            burn_duration: {
                                desc: Time the fire should last on the player each time it is set, in seconds.
                                type: integer
                                min: 0
                            }
                        }
                        "string-origins:climbing": {
                            allow_holding: {
                                desc: If true, the player is able to hold onto blocks.
                                type: boolean
                                default: true
                            }
                            hold_condition: {
                                desc: If set and allow_holding is true, players with the power who are sneaking and meet this condition are "holding onto the block", meaning they won't be affected by gravity.
                                link: entity_cond
                            }
                        }
                        "string-origins:conditioned_attribute": {
                            modifier: {
                                desc: If specified, this modifier will be applied to its corresponding attribute.
                                link: aa_mod
                            }
                            modifiers: {
                                desc: If specified, these modifiers will be applied to their corresponding attributes.
                                type: list
                                vals: {link: "aa_mod"}
                            }
                            tick_rate: {
                                desc: The frequency (in ticks) with which to check the condition. Lower values mean the condition changes are detected more quickly, but this comes at a potentially huge performance cost.
                                type: integer
                                default: 20
                                min: 1
                            }
                            update_health: {
                                desc: When true, the player's health percentage will update to match their new maximum health.
                                type: boolean
                                default: false
                            }
                        }
                        "string-origins:conditioned_restrict_armor": {
                            head: {
                                desc: If set, items which satisfy this condition can not be equipped in the head slot.
                                link: item_cond
                            }
                            chest: {
                                desc: If set, items which satisfy this condition can not be equipped in the chest slot.
                                link: item_cond
                            }
                            legs: {
                                desc: If set, items which satisfy this condition can not be equipped in the legs slot.
                                link: item_cond
                            }
                            feet: {
                                desc: If set, items which satisfy this condition can not be equipped in the feet slot.
                                link: item_cond
                            }
                            tick_rate: {
                                desc: The frequency (in ticks) with which to check the condition. Lower values mean the condition changes are detected more quickly, but this comes at a potentially huge performance cost.
                                type: integer
                                default: 80
                                min: 1
                            }
                        }
                        "string-origins:cooldown": {
                            cooldown: {
                                desc: Cooldown duration in ticks.
                                type: integer
                                min: 0
                            }
                            hud_render: {
                                desc: Specifies how and if a cooldown bar is rendered.
                                link: hud_render
                            }
                        }
                        "string-origins:creative_flight": {}
                        "string-origins:damage_over_time": {
                            interval: {
                                desc: Duration of ticks to wait between the damage.
                                type: integer
                                min: 0
                            }
                            onset_delay: {
                                desc: How many ticks the power has to be active in order to apply the first damage. If not set, this will be equal to interval.
                                type: integer
                                min: 0
                            }
                            damage: {
                                desc: How much damage will be dealt each interval.
                                type: number
                                min: 0
                            }
                            damage_easy: {
                                desc: How much damage will be dealt each interval on Easy difficulty. If not set, this will be equal to damage.
                                type: number
                                min: 0
                            }
                            damage_source: {
                                desc: If set, this is the damage source that will be used to deal the damage.
                                link: damage_source
                            }
                            protection_enchantment: {
                                desc: If set, the total amount of levels of this enchantment will be counted on the player's armor to increase the onset_delay.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            protection_effectiveness: {
                                desc: If protection_enchantment is set, this multiplier scales how effective it will be (1.0 = time the onset_delay is increased is the same as with Hydrophobia and Water Protection).
                                type: number
                                default: 1
                            }
                        }
                        "string-origins:disable_regen": {}
                        "string-origins:effect_immunity": {
                            effect: {
                                desc: If specified, the effect with this ID can not be applied to the player.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            effects: {
                                desc: If specified, the effects with these IDs can not be applied to the player.
                                type: list
                                vals: {
                                    type: string
                                    allow: *a-z0-9_#\/:.-
                                }
                            }
                        }
                        "string-origins:elytra_flight": {
                            render_elytra: {
                                desc: Whether an Elytra should render on the player's back while this power is active.
                                type: boolean
                                default: false
                            }
                            texture_location: {
                                desc: If set, this will be the texture used by an Elytra granted by this power.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                        }
                        "string-origins:entity_glow": {
                            entity_condition: {
                                desc: If set, only entities which fulfill this condition will glow for the player with this power.
                                link: entity_cond
                            }
                            bientity_condition: {
                                desc: If set, only entities which fulfill this bi-entity condition in relation to the power holder will glow for the player with this power.
                                link: bi_entity_cond
                            }
                            use_teams: {
                                desc: Whether glowing entities should use their team's color with their glow. If set to false the entity will instead use the red, green and blue fields within this power type.
                                type: boolean
                                default: true
                            }
                            red: {
                                desc: Value by which the red component of the glow will be multiplied. Range: 0 - 1. Defaults to 1.
                                type: number
                            }
                            green: {
                                desc: Value by which the green component of the glow will be multiplied. Range: 0 - 1. Defaults to 1.
                                type: number
                            }
                            blue: {
                                desc: Value by which the blue component of the glow will be multiplied. Range: 0 - 1. Defaults to 1.
                                type: number
                            }
                        }
                        "string-origins:entity_group": {
                            group: {
                                desc: The group to associate with the player. One of default, undead, arthropod, illager, or aquatic. Click for more information about the entity groups.
                                href: https://minecraft.fandom.com/wiki/Mob#Classification
                                enum: ["default", "undead", "arthropod", "illager", "aquatic"]
                            }
                        }
                        "string-origins:exhaust": {
                            interval: {
                                desc: Duration of ticks to wait between applying exhaustion.
                                type: integer
                                min: 0
                            }
                            exhaustion: {
                                desc: How much exhaustion will be applied each interval.
                                type: number
                            }
                        }
                        "string-origins:fire_immunity": {}
                        "string-origins:fire_projectile": {
                            entity_type: {
                                desc: The ID of the entity type that will be fired.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            cooldown: {
                                desc: The number of ticks the player has to wait between uses of this power.
                                type: integer
                                min: 0
                            }
                            hud_render: {
                                desc: Specifies how and if a cooldown bar is rendered.
                                link: hud_render
                            }
                            count: {
                                desc: The amount of projectiles to fire each use. Defaults to 1.
                                type: integer
                                default: 1
                                min: 1
                            }
                            interval: {
                                desc: Determines the interval for firing multiple projectiles consecutively (in ticks). If set to 0 (default), it will fire all the projectiles at the same tick.
                                type: integer
                                min: 0
                            }
                            start_delay: {
                                desc: Determines how long the start of the firing process is delayed (in ticks). Defaults to 0.
                                type: integer
                                min: 0
                            }
                            speed: {
                                desc: The speed applied to the fired projectile. Defaults to 1.5.
                                type: number
                                min: 0
                            }
                            divergence: {
                                desc: How much each projectile fired is affected by random spread. Defaults to 1.
                                type: number
                                min: 0
                            }
                            sound: {
                                desc: If set, the sound with this ID will be played when the power is used.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            tag: {
                                desc: NBT data of the entity.
                                type: string
                                ext: true
                            }
                            key: {
                                desc: Which active key this power should respond to. If none is specified, this power will use the primary active power key (by default G).
                                link: key
                            }
                        }
                        "string-origins:freeze": {}
                        "string-origins:ignore_water": {}
                        "string-origins:inventory": {
                            title: {
                                desc: The translation key or literal text to use as the display name for the inventory. Defaults to "container.inventory".
                                type: string
                            }
                            drop_on_death: {
                                desc: When this is set to true, the player will drop the items in the inventory on death (vanishing items will vanish!).
                                type: boolean
                            }
                            drop_on_death_filter: {
                                desc: If this is set, only item stacks matching this condition will be dropped on death.
                                link: item_cond
                            }
                            key: {
                                desc: Which active key this power should respond to. If none is specified, this power will use the primary active power key (by default G).
                                link: key
                            }
                        }
                        "string-origins:invisibility": {
                            render_armor: {
                                desc: Whether or not the player's armor should be shown.
                                type: boolean
                                default: false
                            }
                        }
                        "string-origins:invulnerability": {
                            damage_condition: {
                                desc: Specifies which damage the player will be immune to.
                                link: damage_cond
                            }
                        }
                        "string-origins:item_on_item": {
                            using_item_condition: {
                                desc: If set, the actions will only trigger when this condition is met by the item used to right-click an item stack.
                                link: item_cond
                            }
                            on_item_condition: {
                                desc: If set, the actions will only trigger when this condition is met by the item stack that's been right-clicked.
                                link: item_cond
                            }
                            result: {
                                desc: If set, the specified item stack will be given to the player.
                                link: item_stack
                            }
                            result_from_on_stack: {
                                desc: Determines how many items based on the on_item stack will be given as a result for using an item on an item. Mostly to be used in conjunction with result_item_action.
                                type: integer
                            }
                            using_item_action: {
                                desc: If set, this action will be executed on the item stack used to right-click an item stack.
                                link: item_action
                            }
                            on_item_action: {
                                desc: If set, this action will be executed on the item stack that's been right-clicked.
                                link: item_action
                            }
                            result_item_action: {
                                desc: If set, this action will be executed on the item stack that's been right-clicked.
                                link: item_action
                            }
                            entity_action: {
                                desc: If set, this action will be executed on the player after they used an item on an item.
                                link: entity_action
                            }
                        }
                        "string-origins:keep_inventory": {
                            item_condition: {
                                desc: If specified, only make the items that fulfill the specified item condition type persist in the entity's inventory.
                                link: item_cond
                            }
                            slots: {
                                desc: If specified, only make the items that are in the listed inventory slots persist in the entity's inventory. See Positioned Item Stack Slots for possible values.
                                type: list
                                vals: {type: "integer"}
                            }
                        }
                        "string-origins:launch": {
                            cooldown: {
                                desc: The number of ticks the player has to wait between uses of this power.
                                type: integer
                                min: 0
                            }
                            speed: {
                                desc: The speed applied to the player in the upwards direction.
                                type: number
                            }
                            hud_render: {
                                desc: Specifies how and if a cooldown bar is rendered.
                                link: hud_render
                            }
                            sound: {
                                desc: If set, the sound with this ID will be played when the power is used.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            key: {
                                desc: Which active key this power should respond to. If none is specified, this power will use the primary active power key (by default G).
                                link: key
                            }
                        }
                        "string-origins:lava_vision": {
                            s: {
                                desc: Near view. Vanilla default is 0.25, or 0.0 if you are under the effect of Fire Resistance.
                                type: number
                                default: 0.0
                            }
                            v: {
                                desc: Far view. Vanilla default is 1.0, or 3.0 if you are under the effect of Fire Resistance.
                                type: number
                                default: 3.0
                            }
                        }
                        "string-origins:model_color": {
                            red: {
                                desc: Value by which the red component of the texture will be multiplied. Range: 0 - 1.
                                type: number
                                min: 0
                                max: 1
                            }
                            green: {
                                desc: Value by which the green component of the texture will be multiplied. Range: 0 - 1.
                                type: number
                                min: 0
                                max: 1
                            }
                            blue: {
                                desc: Value by which the blue component of the texture will be multiplied. Range: 0 - 1.
                                type: number
                                min: 0
                                max: 1
                            }
                            alpha: {
                                desc: Value by which the alpha (= transparency) component of the texture will be multiplied. Range: 0 - 1.
                                type: number
                                min: 0
                                max: 1
                            }
                        }
                        "string-origins:night_vision": {
                            strength: {
                                desc: This power grants night vision to the player without a status effect. The night vision effect's strength is controlled by this value. Range: 0 - 1.
                                type: number
                                min: 0
                                max: 1
                            }
                        }
                        "string-origins:overlay": {
                            texture: {
                                desc: The ID of the texture to use as an overlay.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            strength: {
                                desc: Value by which the alpha (transparency) component of the texture will be multiplied. Range: 0.0 to 1.0. Defaults to 1.
                                type: number
                                min: 0
                                max: 1
                            }
                            red: {
                                desc: Value by which the red component of the texture will be multiplied. Range: 0.0 to 1.0. Defaults to 1.
                                type: number
                                min: 0
                                max: 1
                            }
                            green: {
                                desc: Value by which the green component of the texture will be multiplied. Range: 0.0 to 1.0. Defaults to 1.
                                type: number
                                min: 0
                                max: 1
                            }
                            blue: {
                                desc: Value by which the blue component of the texture will be multiplied. Range: 0.0 to 1.0. Defaults to 1.
                                type: number
                                min: 0
                                max: 1
                            }
                            draw_mode: {
                                desc: Determines whether to treat black as transparent or draw the texture as is ("nausea" or "texture" respectively).
                                enum: ["nausea", "texture"]
                                default: 1
                            }
                            draw_phase: {
                                desc: Determines if the overlay should render below or above the HUD ("below_hud" or "above_hud" respectively).
                                enum: ["above_hud", "below_hud"]
                                default: 1
                            }
                            hide_with_hud: {
                                desc: Determines if the overlay should be hidden if the HUD elements are hidden (with F1).
                                type: boolean
                                default: true
                            }
                            visible_in_third_person: {
                                desc: Determines if the overlay is visible in third person.
                                type: boolean
                                default: false
                            }
                        }
                        "string-origins:particle": {
                            particle: {
                                desc: The particle type that will be spawned.
                                link: particle
                            }
                            frequency: {
                                desc: Determines how often the particles should spawn (interval in ticks).
                                type: integer
                            }
                            visible_in_first_person: {
                                desc: Determines whether the particle should be visible in first person.
                                type: boolean
                            }
                        }
                        "string-origins:phasing": {
                            block_condition: {
                                desc: If set, the player will only be able to move through these blocks (or not be able to move through these, depending on what blacklist is set to).
                                link: block_cond
                            }
                            blacklist: {
                                desc: If set to true, the block_condition will define which blocks the player can NOT move through.
                                type: boolean
                            }
                            render_type: {
                                desc: Either "none", "remove_blocks", or "blindness" - defines how the phasing will look when inside a block.
                                enum: ["none", "blindness", "remove_blocks"]
                            }
                            view_distance: {
                                desc: How far the player can look through walls while phasing with the "blindness" render_type.
                                type: number
                                default: 10
                            }
                            phase_down_condition: {
                                desc: When specified, this condition needs to be fulfilled in order for blocks below the player to become phasable. Defaults to a condition which checks for sneaking.
                                link: entity_cond
                            }
                        }
                        "string-origins:recipe": {
                            recipe: {
                                id: recipes-6
                                extend: recipe
                                shared: {
                                    id: {
                                        desc: A value to use specifying where to generate this recipe.
                                        type: string
                                        allow: *a-z0-9_#\/:.-
                                    }
                                }
                            }
                        }
                        "string-origins:resource": {
                            min: {
                                desc: The minimum value of the resource.
                                type: integer
                            }
                            max: {
                                desc: The maximum value of the resource.
                                type: integer
                            }
                            start_value: {
                                desc: The value of the resource when the player first chooses an origin with this power. If not set, this will be the same as min.
                                type: integer
                            }
                            hud_render: {
                                desc: Specifies how and if the resource is displayed with a bar on the HUD.
                                link: hud_render
                            }
                            min_action: {
                                desc: If set, this action will be executed on the player whenever the minimum value is reached.
                                link: entity_action
                            }
                            max_action: {
                                desc: If set, this action will be executed on the player whenever the maximum value is reached.
                                link: entity_action
                            }
                        }
                        "string-origins:restrict_armor": {
                            head: {
                                desc: If set, items which satisfy this condition can not be equipped in the head slot.
                                link: item_cond
                            }
                            chest: {
                                desc: If set, items which satisfy this condition can not be equipped in the chest slot.
                                link: item_cond
                            }
                            legs: {
                                desc: If set, items which satisfy this condition can not be equipped in the legs slot.
                                link: item_cond
                            }
                            feet: {
                                desc: If set, items which satisfy this condition can not be equipped in the feet slot.
                                link: item_cond
                            }
                        }
                        "string-origins:self_glow": {
                            entity_condition: {
                                desc: If set, only entities which fulfill this condition will see the entity that has the power glow.
                                link: entity_cond
                            }
                            bientity_condition: {
                                desc: If set, only entities which fulfill this bi-entity condition in relation to the entity that has the power will see the entity that has the power glow.
                                link: bi_entity_cond
                            }
                            use_teams: {
                                desc: Whether glowing entities should use their team's color with their glow. If set to false, the entity will instead use the red, green and blue fields within this power type.
                                type: boolean
                                default: true
                            }
                            red: {
                                desc: Value by which the red component of the glow will be multiplied. Range: 0 - 1. Defaults to 1.
                                type: number
                                min: 0
                                max: 1
                            }
                            green: {
                                desc: Value by which the green component of the glow will be multiplied. Range: 0 - 1. Defaults to 1.
                                type: number
                                min: 0
                                max: 1
                            }
                            blue: {
                                desc: Value by which the blue component of the glow will be multiplied. Range: 0 - 1. Defaults to 1.
                                type: number
                                min: 0
                                max: 1
                            }
                        }
                        "string-origins:shader": {
                            shader: {
                                desc: Specifies the location of the shader resource file to use.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            toggleable: {
                                desc: Determines if the applied shader can be toggled.
                                type: boolean
                                default: true
                            }
                        }
                        "string-origins:shaking": {}
                        "string-origins:simple": {}
                        "string-origins:stacking_status_effect": {
                            min_stacks: {
                                desc: The minimum number of stacks. Negative numbers are allowed.
                                type: integer
                            }
                            max_stacks: {
                                desc: The maximum number of stacks.
                                type: integer
                            }
                            duration_per_stack: {
                                desc: When the status effects are applied, their duration will be stacks * duration_per_stack in ticks.
                                type: integer
                            }
                            tick_rate: {
                                desc: Determines how fast the power will gain/lose stacks in ticks.
                                type: integer
                                default: 10
                            }
                            effect: {
                                desc: If set, this status effect will be applied by this power.
                                link: effect
                            }
                            effects: {
                                desc: If set, these status effects will be applied by this power.
                                type: list
                                vals: {link: "effect"}
                            }
                        }
                        "string-origins:starting_equipment": {
                            stack: {
                                desc: If set, this item stack will be given to the player, optionally into the specified inventory slot.
                                link: pos_item_stack
                            }
                            stacks: {
                                desc: If set, these item stacks will be given to the player, optionally into the specified inventory slots.
                                type: list
                                vals: {link: "pos_item_stack"}
                            }
                            recurrent: {
                                desc: When set to true, the starting equipment will always be given to the player after they died, otherwise only once when the power is gained.
                                type: boolean
                            }
                        }
                        "string-origins:status_bar_texture": {
                            texture: {
                                desc: The ID of the sprite sheet to replace the default one with. Click to see what the vanilla sprite sheet looks like.
                                href: https://media.discordapp.net/attachments/802622603008409600/893716345055772682/unknown.png
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                        }
                        "string-origins:swimming": {}
                        "string-origins:toggle_night_vision": {
                            active_by_default: {
                                desc: Whether this power starts in the on state rather than the off state.
                                type: boolean
                                default: true
                            }
                            strength: {
                                desc: This power grants night vision to the player without a status effect. The night vision effect's strength is controlled by this value. Range: 0 - 1. Defaults to 1.
                                type: number
                                min: 0
                                max: 1
                            }
                            key: {
                                desc: Which active key this power should respond to. If none is specified, this power will use the primary active power key (by default G).
                                link: key
                            }
                        }
                        "string-origins:toggle": {
                            active_by_default: {
                                desc: Whether this power starts in the on state rather than the off state.
                                type: boolean
                                default: true
                            }
                            key: {
                                desc: Which active key this power should respond to. If none is specified, this power will use the primary active power key (by default G).
                                link: key
                            }
                            retain_state: {
                                desc: Whether this power switches back to default if the condition is no longer met.
                                type: boolean
                                default: true
                            }
                        }
                        "string-origins:tooltip": {
                            item_condition: {
                                desc: If set, only applies the tooltip(s) to the item(s) that meets this condition.
                                link: item_cond
                            }
                            text: {
                                desc: If set, apply this string as a tooltip.
                                type: string
                            }
                            texts: {
                                desc: If set, apply these strings as a tooltip.
                                type: list
                                vals: {type: "string"}
                            }
                        }
                        "string-origins:walk_on_fluid": {
                            fluid: {
                                desc: ID of the fluid tag on which the player should be able to walk. Most important examples: minecraft:water and minecraft:lava.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                        }
                        "string-origins:action_on_being_used": {
                            bientity_action: {
                                desc: The action to be executed if specified.
                                link: bi_entity_action
                            }
                            bientity_condition: {
                                desc: If specified, only execute the specified actions if the bi-entity condition is fulfilled.
                                link: bi_entity_cond
                            }
                            item_condition: {
                                desc: If specified, only execute the specified actions if the item condition is fulfilled by the item in the player's specified hand(s) determined by the hands string field.
                                link: item_cond
                            }
                            hands: {
                                desc: Determines if the power should be activated if the player used the specified hand(s). Accepts "off_hand", "main_hand" or both.
                                type: list
                                vals: {type: "string"}
                            }
                            result_stack: {
                                desc: If specified, gives an item stack to the player.
                                link: item_stack
                            }
                            held_item_action: {
                                desc: If specified, executes an item action on the item stack used for right-clicking the entity in the specified hand slot.
                                link: item_action
                            }
                            result_item_action: {
                                desc: The action to be executed on the result item stack if specified.
                                link: item_action
                            }
                            action_result: {
                                desc: Determines the result of the action. Accepts "consume", "consume_partial", "fail", "pass" or "success".
                                enum: ["consume", "consume_partial", "fail", "pass", "success"]
                                default: 4
                            }
                        }
                        "string-origins:action_on_block_break": {
                            entity_action: {
                                desc: If set, this action will be executed on the player when a block is broken.
                                link: entity_action
                            }
                            block_action: {
                                desc: If set, this action will be executed on the block that is broken.
                                link: block_action
                            }
                            block_condition: {
                                desc: If set, the actions will only trigger when this block condition is met by the broken block.
                                link: block_cond
                            }
                            only_when_harvested: {
                                desc: If this is true, the actions will only execute when the player succeeds in harvesting the block (e.g. they will not trigger when stone is broken by hand).
                                type: boolean
                                default: true
                            }
                        }
                        "string-origins:action_on_block_use": {
                            block_condition: {
                                desc: If specified, only execute the specified actions if this condition is fulfilled by the used block.
                                link: block_cond
                            }
                            item_condition: {
                                desc: If specified, only execute the specified actions if this condition is fulfilled by the item in the 'actor' (the player that has the power) entity's specified hand(s) determined by the hands string field.
                                link: item_cond
                            }
                            directions: {
                                desc: If specified, only execute the specified actions if you used the specified face of the block. Defaults to all directions.
                                type: list
                                vals: {enum: ["north", "east", "south", "west", "up", "down"]}
                            }
                            hands: {
                                desc: Determines if the power should be activated if the player used the specified hand(s). Accepts "off_hand", "main_hand" or both. Defaults to both.
                                type: list
                                vals: {type: "string"}
                            }
                            entity_action: {
                                desc: If specified, this entity action type will be executed if all conditions are met.
                                link: entity_action
                            }
                            block_action: {
                                desc: If specified, the used block will run this action if all conditions are met.
                                link: block_action
                            }
                            result_stack: {
                                desc: If specified, gives the item to the 'actor' (the player that has the power) entity.
                                link: item_stack
                            }
                            held_item_action: {
                                desc: If specified, this action will be executed on the item used for right-clicking the 'target' entity in the specified hand(s) determined by the hands string field.
                                link: item_action
                            }
                            result_item_action: {
                                desc: If specified, this action will be executed on the item that is given to the 'actor' (the player that has the power) entity.
                                link: item_action
                            }
                            action_result: {
                                desc: Determines the result of the 'use action'. Defaults to "success".
                                enum: ["success", "consume", "consume_partial", "fail", "pass"]
                            }
                        }
                        "string-origins:action_on_callback": {
                            entity_action_chosen: {
                                desc: If set, this action will be executed on the player when the player chooses their origin on the last layer through the menu - by using the Orb of Origin or missing an origin or joining for the first time - if the power was gained from any of the layers.
                                link: entity_action
                            }
                            execute_chosen_when_orb: {
                                desc: When this is false, the entity_action_chosen will not be executed when the player changes their origin with an orb, but only when the player chooses an origin for the first time or their origin was reset to origins:empty via a command.
                                type: boolean
                                default: true
                            }
                            entity_action_lost: {
                                desc: If set, this action will be executed on the player when the power is lost.
                                link: entity_action
                            }
                            entity_action_added: {
                                desc: If set, this action will be executed on the player when the power is added. Joining a world adds each power back.
                                link: entity_action
                            }
                            entity_action_removed: {
                                desc: If set, this action will be executed on the player when the power is removed and right after the player respawns. Leaving a world removes each power.
                                link: entity_action
                            }
                            entity_action_respawned: {
                                desc: If set, this action will be executed on the player right after the player respawns, after the entity_action_removed.
                                link: entity_action
                            }
                        }
                        "string-origins:action_on_entity_use": {
                            bientity_action: {
                                desc: If set, executes a bi-entity action that can execute on both the 'actor' (player) and 'target' entity.
                                link: bi_entity_action
                            }
                            bientity_condition: {
                                desc: If set, only execute the specified actions if the bi-entity condition is fulfilled.
                                link: bi_entity_cond
                            }
                            item_condition: {
                                desc: If set, only execute the specified actions if the item condition is fulfilled by the item in the player's specified hand(s) equipment slot determined by the hands string field.
                                link: item_cond
                            }
                            hands: {
                                desc: Determines if the power should be activated if the player used a specific hand slot. Accepts "off_hand", "main_hand" or both.
                                type: list
                                vals: {type: "string"}
                            }
                            result_stack: {
                                desc: If set, gives the result item stack to the player.
                                link: item_stack
                            }
                            held_item_action: {
                                desc: If set, executes an item action on the item stack used for right-clicking the entity in the specified hand slot.
                                link: item_action
                            }
                            result_item_action: {
                                desc: If set, executes an item action on the result item stack.
                                link: item_action
                            }
                            action_result: {
                                desc: Determines the result of the action. Accepts "consume", "consume_partial", "fail", "pass" or "success".
                                enum: ["consume", "consume_partial", "fail", "pass", "success"]
                                default: 4
                            }
                        }
                        "string-origins:action_on_hit": {
                            bientity_action: {
                                desc: The action to execute upon hit.
                                link: bi_entity_action
                            }
                            bientity_condition: {
                                desc: If set, the action will only trigger when this bi-entity condition is fulfilled.
                                link: bi_entity_cond
                            }
                            damage_condition: {
                                desc: If set, the action will only trigger when this condition holds for the damage that was dealt by the entity that has the power.
                                link: damage_cond
                            }
                            cooldown: {
                                desc: Interval of ticks this power needs to recharge before the action can be executed again.
                                type: integer
                                min: 0
                            }
                            hud_render: {
                                desc: Determines how the cooldown of this power is visualized on the HUD.
                                link: hud_render
                            }
                        }
                        "string-origins:action_on_item_use": {
                            entity_action: {
                                desc: If set, this action will be executed on the player after they use the item.
                                link: entity_action
                            }
                            item_action: {
                                desc: If set, this action will be executed on the remaining item stack.
                                link: item_action
                            }
                            item_condition: {
                                desc: If set, the actions will only trigger when this item condition is met by the item stack before use.
                                link: item_cond
                            }
                        }
                        "string-origins:action_on_land": {
                            entity_action: {
                                desc: The action to execute on the player.
                                link: entity_action
                            }
                        }
                        "string-origins:action_on_wake_up": {
                            entity_action: {
                                desc: If set, this action will be executed on the player when they wake up.
                                link: entity_action
                            }
                            block_action: {
                                desc: If set, this action will be executed on the bed block.
                                link: block_action
                            }
                            block_condition: {
                                desc: If set, the actions will only trigger when this block condition is met by the bed block.
                                link: block_cond
                            }
                        }
                        "string-origins:action_over_time": {
                            interval: {
                                desc: Interval of ticks between subsequent executions of the action. Must be a value of at least 1.
                                type: integer
                                min: 1
                            }
                            entity_action: {
                                desc: The action to execute on the player each interval.
                                link: entity_action
                            }
                            rising_action: {
                                desc: The action to execute on the first interval tick in which the condition became true.
                                link: entity_action
                            }
                            falling_action: {
                                desc: The action to execute on the first interval tick in which the condition became false.
                                link: entity_action
                            }
                        }
                        "string-origins:action_when_damage_taken": {
                            damage_condition: {
                                desc: If specified, the action will only trigger when this condition holds for the specified type of damage.
                                link: damage_cond
                            }
                            entity_action: {
                                desc: The action to be executed upon taking damage.
                                link: entity_action
                            }
                            cooldown: {
                                desc: Interval of ticks this power needs to recharge before the power can be triggered again.
                                type: integer
                                min: 0
                            }
                            hud_render: {
                                desc: Determines how the cooldown of this power is visualized on the HUD.
                                link: hud_render
                            }
                        }
                        "string-origins:action_when_hit": {
                            bientity_action: {
                                desc: The action to execute upon being hit.
                                link: bi_entity_action
                            }
                            bientity_condition: {
                                desc: If set, the action will only trigger when this bi-entity condition is fulfilled.
                                link: bi_entity_cond
                            }
                            damage_condition: {
                                desc: If set, the action will only trigger when this condition holds for the specified type of damage.
                                link: damage_cond
                            }
                            cooldown: {
                                desc: Interval of ticks this power needs to recharge before the action can be executed again.
                                type: integer
                                min: 0
                            }
                            hud_render: {
                                desc: Determines how the cooldown of this power is visualized on the HUD.
                                link: hud_render
                            }
                        }
                        "string-origins:active_self": {
                            entity_action: {
                                desc: If set, this action will be executed on the player when a block is broken.
                                link: entity_action
                            }
                            cooldown: {
                                desc: Interval of ticks this power needs to recharge before the action can be executed again.
                                type: integer
                                min: 0
                            }
                            hud_render: {
                                desc: Determines how the cooldown of this power is visualized on the HUD.
                                link: hud_render
                            }
                            key: {
                                desc: Which active key this power should respond to. If none is specified, this power will use the primary active power key (by default G).
                                link: key
                            }
                        }
                        "string-origins:attacker_action_when_hit": {
                            damage_condition: {
                                desc: If set, the action will only trigger when this condition holds for the damage that was dealt by the attacker.
                                link: damage_cond
                            }
                            entity_action: {
                                desc: The action to execute on the attacker.
                                link: entity_action
                            }
                            cooldown: {
                                desc: Interval of ticks this power needs to recharge before the action can be executed again.
                                type: integer
                                min: 0
                            }
                            hud_render: {
                                desc: Determines how the cooldown of this power is visualized on the HUD.
                                link: hud_render
                            }
                        }
                        "string-origins:self_action_on_hit": {
                            damage_condition: {
                                desc: If set, the action will only trigger when this condition holds for the damage that was dealt by the player.
                                link: damage_cond
                            }
                            target_condition: {
                                desc: If set, the action will only be triggered when a target matching this condition is hit.
                                link: entity_cond
                            }
                            entity_action: {
                                desc: The action to execute on the player.
                                link: entity_action
                            }
                            cooldown: {
                                desc: Interval of ticks this power needs to recharge before the action can be executed again.
                                type: integer
                                min: 0
                            }
                            hud_render: {
                                desc: Determines how the cooldown of this power is visualized on the HUD.
                                link: hud_render
                            }
                        }
                        "string-origins:self_action_on_kill": {
                            damage_condition: {
                                desc: If set, the action will only trigger when this condition holds for the damage that was dealt by the player.
                                link: damage_cond
                            }
                            target_condition: {
                                desc: If set, the action will only be triggered when a target matching this condition is killed.
                                link: entity_cond
                            }
                            entity_action: {
                                desc: The action to execute on the player.
                                link: entity_action
                            }
                            cooldown: {
                                desc: Interval of ticks this power needs to recharge before the action can be executed again.
                                type: integer
                                min: 0
                            }
                            hud_render: {
                                desc: Determines how the cooldown of this power is visualized on the HUD.
                                link: hud_render
                            }
                        }
                        "string-origins:self_action_when_hit": {
                            damage_condition: {
                                desc: If set, the action will only trigger when this condition holds for the specified type of damage.
                                link: damage_cond
                            }
                            entity_action: {
                                desc: The action to execute on the player.
                                link: entity_action
                            }
                            cooldown: {
                                desc: Interval of ticks this power needs to recharge before the action can be executed again.
                                type: integer
                                min: 0
                            }
                            hud_render: {
                                desc: Determines how the cooldown of this power is visualized on the HUD.
                                link: hud_render
                            }
                        }
                        "string-origins:target_action_on_hit": {
                            damage_condition: {
                                desc: If set, the action will only trigger when this condition holds for the damage that was dealt by the player.
                                link: damage_cond
                            }
                            target_condition: {
                                desc: If set, the action will only be triggered when a target matching this condition is hit.
                                link: entity_cond
                            }
                            entity_action: {
                                desc: The action to execute on the target.
                                link: entity_action
                            }
                            cooldown: {
                                desc: Interval of ticks this power needs to recharge before the action can be executed again.
                                type: integer
                                min: 0
                            }
                            hud_render: {
                                desc: Determines how the cooldown of this power is visualized on the HUD.
                                link: hud_render
                            }
                        }
                        "string-origins:modify_air_speed": {
                            modifier: {
                                desc: If specified, this modifier will be applied to the entity's air speed.
                                link: a_mod
                            }
                            modifiers: {
                                desc: If specified, these modifiers will be applied to the entity's air speed.
                                type: list
                                vals: {link: "a_mod"}
                            }
                        }
                        "string-origins:modify_block_render": {
                            block_condition: {
                                desc: If set, modifies how the block would look like that meets this condition.
                                link: block_cond
                            }
                            block: {
                                desc: The ID of the block that would replace the block that meets the condition from the block_condition object field would look like.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                        }
                        "string-origins:modify_break_speed": {
                            block_condition: {
                                desc: If set, the modifiers will only apply to blocks which satisfy this condition.
                                link: block_cond
                            }
                            modifier: {
                                desc: If specified, this modifier will be applied to the break speed.
                                link: a_mod
                            }
                            modifiers: {
                                desc: If specified, these modifiers will be applied to the break speed.
                                type: list
                                vals: {link: "a_mod"}
                            }
                        }
                        "string-origins:modify_camera_submersion": {
                            from: {
                                desc: Which submersion type to modify. In vanilla, can be none, water or lava.
                                type: string
                            }
                            to: {
                                desc: Which submersion type to change to. In vanilla, can be none, water or lava.
                                type: string
                            }
                        }
                        "string-origins:modify_crafting": {
                            recipe: {
                                desc: The ID of the recipe to be modified.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            item_condition: {
                                desc: If set, it will only apply the item stack from the result field, and trigger the actions when this condition is met by the result item from the crafting recipe.
                                link: item_cond
                            }
                            result: {
                                desc: If set, replaces the result item stack of the recipe.
                                link: item_stack
                            }
                            item_action: {
                                desc: If set, execute this item action on the result item stack.
                                link: item_action
                            }
                            entity_action: {
                                desc: If set, execute this entity action on the player.
                                link: entity_action
                            }
                            block_action: {
                                desc: If set, execute this block action at the block used for crafting the recipe.
                                link: block_action
                            }
                        }
                        "string-origins:modify_damage_dealt": {
                            bientity_condition: {
                                desc: If specified, the specified modifier(s) and/or action(s) will only apply if either or both 'actor' and 'target' fulfills this bi-entity condition type.
                                link: bi_entity_cond
                            }
                            damage_condition: {
                                desc: If set, the modifiers will only apply to damage which satisfies this condition.
                                link: damage_cond
                            }
                            target_condition: {
                                desc: If set, the action will only be triggered when a target matching this condition is hit.
                                link: entity_cond
                            }
                            modifier: {
                                desc: If specified, this modifier will be applied to the damage amount.
                                link: a_mod
                            }
                            modifiers: {
                                desc: If specified, these modifiers will be applied to the damage amount.
                                type: list
                                vals: {link: "a_mod"}
                            }
                            bientity_action: {
                                desc: If specified, this bi-entity action type will be executed on either or both 'actor' and 'target'.
                                link: bi_entity_action
                            }
                            self_action: {
                                desc: If set, this action will be executed on the player whenever this power applies a modification.
                                link: entity_action
                            }
                            target_action: {
                                desc: If set, this action will be executed on the target whenever this power applies a modification.
                                link: entity_action
                            }
                        }
                        "string-origins:modify_damage_taken": {
                            bientity_condition: {
                                desc: If specified, the specified modifier(s) and/or action(s) will only apply if either or both 'actor' and 'target' fulfills this bi-entity condition type.
                                link: bi_entity_cond
                            }
                            damage_condition: {
                                desc: If set, the modifiers will only apply to damage which satisfies this condition.
                                link: damage_cond
                            }
                            modifier: {
                                desc: If specified, this modifier will be applied to the damage amount.
                                link: a_mod
                            }
                            modifiers: {
                                desc: If specified, these modifiers will be applied to the damage amount.
                                type: list
                                vals: {link: "a_mod"}
                            }
                            bientity_action: {
                                desc: If specified, this bi-entity action type will be executed on either or both 'actor' and 'target'.
                                link: bi_entity_action
                            }
                            self_action: {
                                desc: If set, this action will be executed on the player whenever this power applies a modification.
                                link: entity_action
                            }
                            attacker_action: {
                                desc: If set, this action will be executed on the attacker whenever this power applies a modification.
                                link: entity_action
                            }
                        }
                        "string-origins:modify_exhaustion": {
                            modifier: {
                                desc: If specified, this modifier will be applied to the exhaustion amount.
                                link: a_mod
                            }
                            modifiers: {
                                desc: If specified, these modifiers will be applied to the exhaustion amount.
                                type: list
                                vals: {link: "a_mod"}
                            }
                        }
                        "string-origins:modify_falling": {
                            velocity: {
                                desc: How slow/fast the falling velocity should be.
                                type: number
                            }
                            take_fall_damage: {
                                desc: Whether the player should take fall damage or not.
                                type: boolean
                                default: true
                            }
                        }
                        "string-origins:modify_fluid_render": {
                            block_condition: {
                                desc: If set, modifies how the block that meets this condition would look like.
                                link: block_cond
                            }
                            fluid_condition: {
                                desc: If set, modifies how the fluid that meets the condition would look like.
                                link: fluid_cond
                            }
                            fluid: {
                                desc: The ID of the fluid that would replace how the block/fluid that meets the conditions in the block_condition and/or fluid_condition object field would look like.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                        }
                        "string-origins:modify_food": {
                            item_condition: {
                                desc: If set, the modifiers will only apply to food items which satisfy this condition.
                                link: item_cond
                            }
                            item_action: {
                                desc: If specified, this item action type will be executed on the remaining item stacks that was consumed.
                                link: item_action
                            }
                            replace_stack: {
                                desc: If specified, this item stack will replace the item stack that was consumed after consuming it.
                                link: item_stack
                            }
                            food_modifier: {
                                desc: If specified, this modifier will be applied to the food amount gained by eating.
                                link: a_mod
                            }
                            food_modifiers: {
                                desc: If specified, these modifiers will be applied to the food amount gained by eating.
                                type: list
                                vals: {link: "a_mod"}
                            }
                            saturation_modifier: {
                                desc: If set, this modifier will apply to the saturation gained by eating.
                                link: a_mod
                            }
                            saturation_modifiers: {
                                desc: If set, these modifiers will apply to the saturation gained by eating.
                                type: list
                                vals: {link: "a_mod"}
                            }
                            entity_action: {
                                desc: If set, this action will be executed on the player when eating this item.
                                link: entity_action
                            }
                            always_edible: {
                                desc: If set to true, makes it so that the food item can still be eaten regardless if the player's hunger bar is full.
                                type: boolean
                            }
                            prevent_effects: {
                                desc: If set to true, prevent status effects from being applied.
                                type: boolean
                            }
                        }
                        "string-origins:modify_harvest": {
                            block_condition: {
                                desc: If set, the modification will only apply to blocks which satisfy this condition.
                                link: block_cond
                            }
                            allow: {
                                desc: When true, the player will be able to harvest the blocks. When false, the player will not be able to harvest the blocks.
                                type: boolean
                                default: false
                            }
                        }
                        "string-origins:modify_jump": {
                            modifier: {
                                desc: If specified, this modifier will be applied to the upwards jump velocity.
                                link: a_mod
                            }
                            modifiers: {
                                desc: If specified, these modifiers will be applied to the upwards jump velocity.
                                type: list
                                vals: {link: "a_mod"}
                            }
                            entity_action: {
                                desc: If set, this action will execute when the player jumps.
                                link: entity_action
                            }
                        }
                        "string-origins:modify_lava_speed": {
                            modifier: {
                                desc: If specified, this modifier will be applied to the player's speed in lava.
                                link: a_mod
                            }
                            modifiers: {
                                desc: If specified, these modifiers will be applied to the player's speed in lava.
                                type: list
                                vals: {link: "a_mod"}
                            }
                        }
                        "string-origins:modify_player_spawn": {
                            dimension: {
                                desc: ID of the dimension the player should spawn in. Vanilla dimensions are minecraft:overworld, minecraft:the_nether and minecraft:the_end, but IDs of custom/modded dimensions should also work.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            biome: {
                                desc: If set, the player will spawn in the biome with this ID.
                                href: https://minecraft.fandom.com/wiki/Biome#Biome_IDs
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            structure: {
                                desc: ID of the structure the player should spawn in. Keep in mind that the structure needs to generate in the specified dimension!
                                href: https://minecraft.fandom.com/wiki/Commands/locate#Arguments
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            spawn_strategy: {
                                desc: Either default or center. default tries to find a spawn close to the coordinates of the overworld spawn (while considering the dimension_distance_multiplier). center tries to spawn the player close to 0, 0 of the dimension.
                                enum: ["default", "center"]
                            }
                            dimension_distance_multiplier: {
                                desc: Needs to be set when spawn_strategy is default. Defines the ratio of overworld blocks to blocks in this dimension, e.g. for the Nether this would be 0.125.
                                type: number
                                default: 1
                            }
                        }
                        "string-origins:modify_projectile_damage": {
                            damage_condition: {
                                desc: If set, the modifiers will only apply to damage which satisfies this condition.
                                link: damage_cond
                            }
                            target_condition: {
                                desc: If set, the action will only be triggered when a target matching this condition is hit.
                                link: entity_cond
                            }
                            modifier: {
                                desc: If specified, this modifier will be applied to the damage amount.
                                link: a_mod
                            }
                            modifiers: {
                                desc: If specified, these modifiers will be applied to the damage amount.
                                type: list
                                vals: {link: "a_mod"}
                            }
                            self_action: {
                                desc: If set, this action will be executed on the player whenever this power applies a modification.
                                link: entity_action
                            }
                            target_action: {
                                desc: If set, this action will be executed on the target whenever this power applies a modification.
                                link: entity_action
                            }
                        }
                        "string-origins:modify_slipperiness": {
                            block_condition: {
                                desc: If specified, the modifier(s) will only apply to the blocks that fulfills this condition.
                                link: block_cond
                            }
                            modifier: {
                                desc: If specified, this modifier will be applied to the entity's slipperiness.
                                link: a_mod
                            }
                            modifiers: {
                                desc: If specified, these modifiers will be applied to the entity's slipperiness.
                                type: list
                                vals: {link: "a_mod"}
                            }
                        }
                        "string-origins:modify_status_effect_amplifier": {
                            status_effect: {
                                desc: The namespace and ID of the status effect that will have its amplifier modified.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            modifier: {
                                desc: The modifier to apply to the amplifier of the specified status effect.
                                link: a_mod
                            }
                        }
                        "string-origins:modify_status_effect_duration": {
                            status_effect: {
                                desc: The namespace and ID of the status effect that will have its duration modified.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            modifier: {
                                desc: The modifier to apply to the duration of the specified status effect.
                                link: a_mod
                            }
                        }
                        "string-origins:modify_swim_speed": {
                            modifier: {
                                desc: If specified, this modifier will be applied to the player's swim speed.
                                link: a_mod
                            }
                            modifiers: {
                                desc: If specified, these modifiers will be applied to the player's swim speed.
                                type: list
                                vals: {link: "a_mod"}
                            }
                        }
                        "string-origins:modify_xp_gain": {
                            modifier: {
                                desc: If specified, this modifier will be applied to the experience gained.
                                link: a_mod
                            }
                            modifiers: {
                                desc: If specified, these modifiers will be applied to the experience gained.
                                type: list
                                vals: {link: "a_mod"}
                            }
                        }
                        "string-origins:prevent_block_selection": {
                            block_condition: {
                                desc: When set, only blocks which meet this condition will be unable to be selected.
                                link: block_cond
                            }
                        }
                        "string-origins:prevent_being_used": {
                            bientity_action: {
                                desc: The action to execute upon preventing other players from right-clicking the entity that has the power if specified.
                                link: bi_entity_action
                            }
                            bientity_condition: {
                                desc: If specified, only execute the specified actions if the bi-entity condition is fulfilled.
                                link: bi_entity_cond
                            }
                            item_condition: {
                                desc: If specified, only execute the specified actions if the item condition is fulfilled by the item in the other player's specified hand(s) equipment slot determined by the hands string field.
                                link: item_cond
                            }
                            hands: {
                                desc: Determines if the power should be activated if the other player used the specified hand slot(s). Accepts "off_hand", "main_hand" or both.
                                type: list
                                vals: {type: "string"}
                            }
                            result_stack: {
                                desc: If specified, gives an item stack to the player.
                                link: item_stack
                            }
                            held_item_action: {
                                desc: If specified, executes an item action on the item stack used for right-clicking the entity in the specified hand slot.
                                link: item_action
                            }
                            result_item_action: {
                                desc: If specified, executes an item action on the given item stack.
                                link: item_action
                            }
                        }
                        "string-origins:prevent_block_use": {
                            block_condition: {
                                desc: When set, only blocks which meet this condition will be unable to be used.
                                link: block_cond
                            }
                        }
                        "string-origins:prevent_death": {
                            damage_condition: {
                                desc: If set, death will only prevented when damage which matches this condition is dealt. Other damage will still kill the player.
                                link: damage_cond
                            }
                            entity_action: {
                                desc: The action to execute on the player when death is prevented.
                                link: entity_action
                            }
                        }
                        "string-origins:prevent_elytra_flight": {
                            entity_action: {
                                desc: If specified, execute this entity action type upon preventing the entity that has the power.
                                link: entity_action
                            }
                        }
                        "string-origins:prevent_entity_collision": {
                            bientity_condition: {
                                desc: If specified, collision is only affected as long as both the 'actor' (the entity with the power), and the 'target' fulfill the specified conditions.
                                link: bi_entity_cond
                            }
                        }
                        "string-origins:prevent_entity_render": {
                            entity_condition: {
                                desc: If set, only entities which fulfill this condition will be invisible.
                                link: entity_cond
                            }
                            bientity_condition: {
                                desc: If set, only entities which fulfill this bi-entity condition in relation to the power holder will be invisible for the player with this power.
                                link: bi_entity_cond
                            }
                        }
                        "string-origins:prevent_entity_use": {
                            bientity_action: {
                                desc: The action to execute upon being prevented from right-clicking an entity.
                                link: bi_entity_action
                            }
                            bientity_condition: {
                                desc: If specified, only execute the specified actions if the bi-entity condition is fulfilled.
                                link: bi_entity_cond
                            }
                            item_condition: {
                                desc: If specified, only execute the specified actions if the item condition is fulfilled by the item in the player's specified hand(s) equipment slot determined by the hands string field.
                                link: item_cond
                            }
                            hands: {
                                desc: Determines if the power should be activated if the player used the specified hand slot(s). Accepts "off_hand", "main_hand" or both.
                                type: list
                                vals: {type: "string"}
                            }
                            result_stack: {
                                desc: If specified, gives an item stack to the player.
                                link: item_stack
                            }
                            held_item_action: {
                                desc: If specified, executes an item action on the item stack used for right-clicking the entity in the specified hand slot.
                                link: item_action
                            }
                            result_item_action: {
                                desc: If specified, executes an item action on the given item stack.
                                link: item_action
                            }
                        }
                        "string-origins:prevent_feature_render": {
                            feature: {
                                desc: If specified, this feature renderer (e.g: armor layer, sheep wool layer, or the sub-classes that extends the FeatureRender super-class) will not be rendered to the entity that has the power.
                                href: https://origins.readthedocs.io/en/latest/types/power_types/prevent_feature_render/
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            features: {
                                desc: If specified, these feature renderers will not be rendered.
                                type: list
                                vals: {
                                    type: string
                                    allow: *a-z0-9_#\/:.-
                                }
                            }
                        }
                        "string-origins:prevent_game_event": {
                            event: {
                                desc: If specified, the game event with this namespace and ID will be prevent from being emitted by the entity.
                                href: https://origins.readthedocs.io/en/latest/types/power_types/prevent_game_event/
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            events: {
                                desc: If specified, the game events with these namespace and IDs will be prevent from being emitted by the entity.
                                type: list
                                vals: {
                                    type: string
                                    allow: *a-z0-9_#\/:.-
                                }
                            }
                            tag: {
                                desc: If specified, the game events inside game event tag will be prevented from being emitted by the entity.
                                type: string
                                allow: *a-z0-9_#\/:.-
                            }
                            entity_action: {
                                desc: If specified, this action will be executed on the entity upon preventing game events.
                                link: entity_action
                            }
                        }
                        "string-origins:prevent_item_use": {
                            item_condition: {
                                desc: If set, only items which satisfy this condition will be blocked from being used.
                                link: item_cond
                            }
                        }
                        "string-origins:prevent_sleep": {
                            block_condition: {
                                desc: If set, sleep will only be prevented if this condition holds for the bed.
                                link: block_cond
                            }
                            message: {
                                desc: The message that will be shown when sleep is prevented this way. Can be a literal text or a translation key which will be localized using a language file. Defaults to "origins.cant_sleep".
                                type: string
                                ext: true
                            }
                            set_spawn_point: {
                                desc: If false, right-clicking the bed while sleeping is prevented with this power will prevent the player from setting their the spawn point.
                                type: boolean
                                default: true
                            }
                        }
                    }
                }
            }
        }
        multi_power: {
            title: multiple
            extend: power_base
            props: {
                type: {
                    desc: ID of the desired Power Type.
                    const: origins:multiple
                }
            }
            extra: {
                nopanel: true
                or: [
                    {link: "power"}
                    {link: "custom_power"}
                ]
            }
        }
        custom_power: {
            title: custom
            extend: power_base
            props: {
                type: {
                    desc: ID of the desired Power Type.
                    type: string
                }
            }
            extra: {
                link: nany
            }
        }

        nany: {
            nopanel: true
            or: [
                {title: "constant", enum: [true, false, null]}
                {type: "number"}
                {type: "string"}
                {type: "list", vals: {link: "nany"}}
                {type: "object", extra: {link: "nany"}}
            ]
        }
        item_stack: {
            desc: An Object which defines a new item stack.
            type: object
            props: {
                item: {
                    id: predicates-7
                    link: item
                }
                amount: {
                    desc: Size of the stack. Defaults to 1.
                    type: integer
                    min: 1
                }
                tag: {
                    desc: NBT data of the item.
                    type: string
                    ext: true
                }
            }
        }
        pos_item_stack: {
            extend: item_stack
            props: {
                slot: {
                    desc: Inventory slot position of the stack. If not specified, will be the first free slot in the inventory. Click to see for possible values.
                    href: https://origins.readthedocs.io/en/latest/misc/positioned_item_stack_slots/
                    type: integer
                }
            }
        }
        mod_op: {
            desc:
            '''
            Can be one of
            "addition", which adds (or subtracts) the modifier value to the base: NewValue = BaseValue + ModifierValue.
            "multiply_base", which adds (or subtracts) a portion of the base value: NewValue = CurrentValue + (BaseValue * ModifierValue).
            "multiply_total", which multiplies the total value by this value: NewTotalValue = TotalValue * (1 + ModifierValue).
            '''
            enum: ["addition", "multiply_base", "multiply_total"]
        }
        a_mod: {
            desc: An Object used to specify how a specific attribute should be modified.
            href: https://origins.readthedocs.io/en/latest/data_types/attribute_modifier/
            type: object
            props: {
                operation: {
                    desc: The operation which will be performed by this modifier.
                    link: mod_op
                }
                value: {
                    desc: The value with which to apply the operation to the value.
                    type: number
                }
                name: {
                    desc: (Optional) A descriptive name for the modifier, describing where it comes from.
                    type: string
                }
            }
        }
        aa_mod: {
            desc: An Object used to specify how a specific attribute should be modified. Basically an Attribute Modifier with an additional attribute field.
            href: https://origins.readthedocs.io/en/latest/data_types/attributed_attribute_modifier/
            type: object
            props: {
                attribute: {
                    desc: ID of the attribute which will be modified by this modifier.
                    type: string
                    allow: *a-z0-9_#\/:.-
                }
                operation: {
                    desc: The operation which will be performed by this modifier.
                    link: mod_op
                }
                value: {
                    desc: The value with which to apply the operation to the value.
                    type: number
                }
                name: {
                    desc: (Optional) A descriptive name for the modifier, describing where it comes from.
                    type: string
                }
            }
        }
        hud_render: {
            desc: An Object used to define how a resource or cooldown bar should be rendered.
            href: https://origins.readthedocs.io/en/latest/data_types/hud_render/
            type: object
            props: {
                should_render: {
                    desc: Whether the bar should be visible or not.
                    type: boolean
                    default: true
                }
                sprite_location: {
                    desc: The path to the file in the assets which contains what the bar looks like. See the List of resource bar files for a list of files included by default in the mod. Defaults to "origins:textures/gui/resource_bar.png".
                    href: https://origins.readthedocs.io/en/latest/misc/resource_bars/
                    type: string
                    allow: *a-z0-9_#\/:.-
                }
                bar_index: {
                    desc: The indexed position of the bar on the sprite to use. Please note that indexes start at 0.
                    type: integer
                    min: 0
                }
                condition: {
                    desc: If set (and should_render is true), the bar will only display when the entity with the power fulfills this condition.
                    link: entity_cond
                }
                inverted: {
                    desc: If set to true, inverts the way the hud render process (it'll look like its value is being decreased).
                    type: boolean
                }
            }
        }
        damage_source: {
            desc: An Object used to specify how to deal damage to an entity.
            href: https://origins.readthedocs.io/en/latest/data_types/damage_source/
            type: object
            props: {
                name: {
                    desc: The name of the damage source. Controls death message as well as other interactions. Consider vanilla damage sources when picking a name.
                    href: https://origins.readthedocs.io/en/latest/misc/vanilla_damage_sources/
                    type: string
                }
                bypasses_armor: {
                    desc: When true, armor values are not taken into account when calculating the actual damage amount taken.
                    type: boolean
                }
                fire: {
                    desc: When true, the damage will be considered fire damage.
                    type: boolean
                }
                unblockable: {
                    desc: When true, the damage will be unblockable (not reduced by resistance effects or protection enchantments).
                    type: boolean
                }
                magic: {
                    desc: When true, the damage will be considered magic damage.
                    type: boolean
                }
                out_of_world: {
                    desc: When true, the damage will be considered "out of world" damage, i.e. damage from falling into the void.
                    type: boolean
                }
            }
        }
        key: {
            or: [
                {
                    title: new
                    type: object
                    props: {
                        key: {
                            desc: A string specifying the keybinding. Click for possible vanilla and origins values.
                            href: https://origins.readthedocs.io/en/latest/misc/keybindings/
                            type: string
                        }
                        continuous: {
                            desc: Whether the keybinding should only trigger the power on the first tick the key is held down, or, if set to true, continuously on each tick while the key is held.
                            type: boolean
                        }
                    }
                }
                {title: "old", enum: ["primary", "secondary"]}
            ]
            unspec: true
        }
        effect: {
            desc: An Object used to define a status effect with duration, amplifier, etc.
            type: object
            props: {
                effect: {
                    desc: ID of the status effect
                    type: string
                    allow: *a-z0-9_#\/:.-
                }
                duration: {
                    desc: Duration of the status effect in ticks.
                    type: integer
                    default: 100
                }
                amplifier: {
                    desc: Amplifier of the status effect.
                    type: integer
                    default: 0
                }
                is_ambient: {
                    desc: Whether the effect counts as an ambient effect.
                    type: boolean
                }
                show_particles: {
                    desc: Whether the status effect will spawn particles on the player.
                    type: boolean
                    default: true
                }
                show_icon: {
                    desc: Whether the status effect will show an icon on the HUD.
                    type: boolean
                    default: true
                }
            }
        }
        comparison: {
            desc: How the state should be compared to the specified value.
            enum: ["<", "<=", ">", ">=", "==", "!="]
            default: 3
        }
        vector: {
            desc: An object that specifies the X, Y and Z coordinates of a certain point in space.
            type: object
            props: {
                x: {
                    desc: The X coordinate of the point.
                    type: number
                    default: 0
                }
                y: {
                    desc: The Y coordinate of the point.
                    type: number
                    default: 0
                }
                z: {
                    desc: The X coordinate of the point.
                    type: number
                    default: 0
                }
            }
        }
        particle: {
            desc: Either a String which defines the particle type or an Object which defines the particle type and its additional parameters.
            or: [
                {
                    type: string
                    allow: *a-z0-9_#\/:.-
                }
                {
                    type: object
                    props: {
                        type: {
                            desc: The namespace and ID of the particle type.
                            type: string
                            allow: *a-z0-9_#\/:.-
                        }
                        params: {
                            desc: The additional parameter(s) for the particle type.
                            type: string
                            ext: true
                        }
                    }
                }
            ]
        }
    }
    or: [
        {
            title: simple
            link: power
        }
        {
            title: multiple
            link: multi_power
        }
        {
            title: custom
            link: custom_power
        }
    ]
}
